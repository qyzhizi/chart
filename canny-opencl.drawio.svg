<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than draw.io -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="6123px" height="4242px" viewBox="-0.5 -0.5 6123 4242" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2023-07-07T06:35:34.666Z&quot; agent=&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&quot; etag=&quot;GaUKwHlHErQV9qkq5g7N&quot; version=&quot;21.6.1&quot; type=&quot;github&quot;&gt;&lt;diagram id=&quot;C5RBs43oDa-KdzZeNtuy&quot; name=&quot;Page-1&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs><clipPath id="mx-clip-4-208-422-26-0"><rect x="4" y="208" width="422" height="26"/></clipPath><clipPath id="mx-clip-4-234-422-26-0"><rect x="4" y="234" width="422" height="26"/></clipPath><clipPath id="mx-clip-4-260-422-26-0"><rect x="4" y="260" width="422" height="26"/></clipPath><clipPath id="mx-clip-4-294-422-308-0"><rect x="4" y="294" width="422" height="308"/></clipPath><clipPath id="mx-clip-4-696-422-294-0"><rect x="4" y="696" width="422" height="294"/></clipPath><clipPath id="mx-clip-4-1042-422-288-0"><rect x="4" y="1042" width="422" height="288"/></clipPath><clipPath id="mx-clip-4-1382-422-338-0"><rect x="4" y="1382" width="422" height="338"/></clipPath><clipPath id="mx-clip-576-1220-422-100-0"><rect x="576" y="1220" width="422" height="100"/></clipPath><clipPath id="mx-clip-1431-1422-422-60-0"><rect x="1431" y="1422" width="422" height="60"/></clipPath><clipPath id="mx-clip-2183-1347-422-210-0"><rect x="2183" y="1347" width="422" height="210"/></clipPath><clipPath id="mx-clip-1403-1777-422-60-0"><rect x="1403" y="1777" width="422" height="60"/></clipPath><clipPath id="mx-clip-2173-1602-422-360-0"><rect x="2173" y="1602" width="422" height="360"/></clipPath><clipPath id="mx-clip-2853-1447-712-670-0"><rect x="2853" y="1447" width="712" height="670"/></clipPath><clipPath id="mx-clip-2866-1380-602-55-0"><rect x="2866" y="1380" width="602" height="55"/></clipPath><clipPath id="mx-clip-736-4155-292-68-0"><rect x="736" y="4155" width="292" height="68"/></clipPath><clipPath id="mx-clip-1186-4113-292-130-0"><rect x="1186" y="4113" width="292" height="130"/></clipPath><clipPath id="mx-clip-826-2209-292-34-0"><rect x="826" y="2209" width="292" height="34"/></clipPath><clipPath id="mx-clip-1358-2002-460-448-0"><rect x="1358" y="2002" width="460" height="448"/></clipPath><clipPath id="mx-clip-2166-2040-415-372-0"><rect x="2166" y="2040" width="415" height="372"/></clipPath><clipPath id="mx-clip-546-1171-172-30-0"><rect x="546" y="1171" width="172" height="30"/></clipPath><clipPath id="mx-clip-886-1171-172-30-0"><rect x="886" y="1171" width="172" height="30"/></clipPath><clipPath id="mx-clip-1611-1146-452-210-0"><rect x="1611" y="1146" width="452" height="210"/></clipPath><clipPath id="mx-clip-2256-1176-787-151-0"><rect x="2256" y="1176" width="787" height="151"/></clipPath><clipPath id="mx-clip-806-2770-202-38-0"><rect x="806" y="2770" width="202" height="38"/></clipPath><clipPath id="mx-clip-1313-2565-512-470-0"><rect x="1313" y="2565" width="512" height="470"/></clipPath><clipPath id="mx-clip-2056-2460-752-680-0"><rect x="2056" y="2460" width="752" height="680"/></clipPath><clipPath id="mx-clip-686-3527-202-38-0"><rect x="686" y="3527" width="202" height="38"/></clipPath><clipPath id="mx-clip-1096-3416-412-260-0"><rect x="1096" y="3416" width="412" height="260"/></clipPath><clipPath id="mx-clip-2886-3158-712-777-0"><rect x="2886" y="3158" width="712" height="777"/></clipPath><clipPath id="mx-clip-1583-4113-365-130-0"><rect x="1583" y="4113" width="365" height="130"/></clipPath><clipPath id="mx-clip-706-505-122-30-0"><rect x="706" y="505" width="122" height="30"/></clipPath><clipPath id="mx-clip-946-20-410-999-0"><rect x="946" y="20" width="410" height="999"/></clipPath><clipPath id="mx-clip-1896-5-922-1030-0"><rect x="1896" y="5" width="922" height="1030"/></clipPath><clipPath id="mx-clip-3986-1523-322-65-0"><rect x="3986" y="1523" width="322" height="65"/></clipPath><clipPath id="mx-clip-4656-1200-462-710-0"><rect x="4656" y="1200" width="462" height="710"/></clipPath><clipPath id="mx-clip-5286-1130-832-870-0"><rect x="5286" y="1130" width="832" height="870"/></clipPath><clipPath id="mx-clip-696-3850-102-38-0"><rect x="696" y="3850" width="102" height="38"/></clipPath><clipPath id="mx-clip-996-3850-162-38-0"><rect x="996" y="3850" width="162" height="38"/></clipPath><clipPath id="mx-clip-1431-3789-492-160-0"><rect x="1431" y="3789" width="492" height="160"/></clipPath><clipPath id="mx-clip-1956-3789-492-160-0"><rect x="1956" y="3789" width="492" height="160"/></clipPath><clipPath id="mx-clip-3176-100-662-840-0"><rect x="3176" y="100" width="662" height="840"/></clipPath><clipPath id="mx-clip-2676-2190-415-72-0"><rect x="2676" y="2190" width="415" height="72"/></clipPath><clipPath id="mx-clip-2976-2720-647-160-0"><rect x="2976" y="2720" width="647" height="160"/></clipPath><clipPath id="mx-clip-3736-3158-712-777-0"><rect x="3736" y="3158" width="712" height="777"/></clipPath><style type="text/css">svg { filter: invert(93%) hue-rotate(180deg); }svg image { invert(100%) hue-rotate(180deg) saturate(1.25) }</style></defs><g><path d="M 0 203 L 0 177 L 430 177 L 430 203" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 0 203 L 0 597 L 430 597 L 430 203" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 203 L 430 203" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" font-style="italic" pointer-events="none" text-anchor="middle" font-size="12px"><text x="214.5" y="194.5">ImageProcessor</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-208-422-26-0)" font-size="12px"><text x="5.5" y="220.5">protected:</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-234-422-26-0)" font-size="12px"><text x="5.5" y="246.5">    cv:Mat input_; </text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-260-422-26-0)" font-size="12px"><text x="5.5" y="272.5">    cvMat output_;</text></g><path d="M 0 285 L 430 285" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-294-422-308-0)" font-size="12px"><text x="5.5" y="306.5"> public:</text><text x="5.5" y="320.5">  ImageProcessor() {}</text><text x="5.5" y="334.5">  // Note that input matrices are assumed to be 8 bit 1 channel grayscale.</text><text x="5.5" y="348.5">  virtual void LoadImage(cv::Mat &amp;input);</text><text x="5.5" y="362.5">  // Gets the output image.</text><text x="5.5" y="376.5">  virtual cv::Mat output();</text><text x="5.5" y="390.5">  // For parallel implementations, this is a blocking call which finishes all</text><text x="5.5" y="404.5">  // operations, acting as a barrier. This is useful for benchmarking</text><text x="5.5" y="418.5">  // purposes, so that you can time a subset of an operation.</text><text x="5.5" y="432.5">  // For serial versions, this will do nothing.</text><text x="5.5" y="446.5">  virtual void FinishJobs() {}</text><text x="5.5" y="460.5">  // Execute Gaussian Blur</text><text x="5.5" y="474.5">  virtual void Gaussian() = 0;</text><text x="5.5" y="488.5">  // Execute Sobel Filtering</text><text x="5.5" y="502.5">  virtual void Sobel() = 0;</text><text x="5.5" y="516.5">  // Execute Non-Maximum Supression</text><text x="5.5" y="530.5">  virtual void NonMaxSuppression() = 0;</text><text x="5.5" y="544.5">  // Execute Hysteresis Thresholding</text><text x="5.5" y="558.5">  virtual void HysteresisThresholding() = 0;</text><text x="5.5" y="572.5">  // Execute all stages as quickly as possible</text><text x="5.5" y="586.5">  virtual void Canny();</text></g><path d="M 215 665 L 215 631 L 214.31 604.29" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 214.17 599.04 L 217.85 605.95 L 214.31 604.29 L 210.85 606.13 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 641px; margin-left: 219px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">父类</div></div></div></foreignObject><text x="219" y="644" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">父类</text></switch></g><path d="M 0 691 L 0 665 L 430 665 L 430 691" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 691 L 0 1715 L 430 1715 L 430 691" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 0 691 L 430 691" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" text-anchor="middle" font-size="12px"><text x="214.5" y="682.5">OpenclImageProcessor</text></g><rect x="0" y="691" width="430" height="294" fill="#008a00" stroke="#005700" pointer-events="none"/><g fill="#ffffff" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-696-422-294-0)" font-size="12px"><text x="5.5" y="708.5">  // OpenCL Objects</text><text x="5.5" y="722.5">  std::vector&lt;cl::Platform&gt; platforms_;</text><text x="5.5" y="736.5">  std::vector&lt;cl::Device&gt; devices_;</text><text x="5.5" y="750.5">  cl::Device selected_device_;</text><text x="5.5" y="764.5">  cl::Context context_;</text><text x="5.5" y="778.5">  cl::CommandQueue queue_;</text><text x="5.5" y="792.5">  // OpenCL kernels</text><text x="5.5" y="806.5">  cl::Kernel gaussian_;</text><text x="5.5" y="820.5">  cl::Kernel sobel_;</text><text x="5.5" y="834.5">  cl::Kernel non_max_suppression_;</text><text x="5.5" y="848.5">  cl::Kernel hysteresis_thresholding_;</text><text x="5.5" y="862.5">  // Create a buffer to hold the direction angle theta</text><text x="5.5" y="876.5">  cl::Buffer theta_;</text><text x="5.5" y="890.5">  // Note that existing code assumes only two buffers exist</text><text x="5.5" y="904.5">  cl::Buffer buffers_[2];</text><text x="5.5" y="918.5">  // Keeps track of the next buffer to use as a destination. This should</text><text x="5.5" y="932.5">  // not be accessed directly, instead look at using nextBuff/prevBuff.</text><text x="5.5" y="946.5">  size_t buffer_index_ = 0;</text><text x="5.5" y="960.5">  // Determines the NDRange workgroup size.</text><text x="5.5" y="974.5">  int workgroup_size_ = 1;</text></g><path d="M 0 1011 L 430 1011" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><rect x="0" y="1037" width="430" height="288" fill="#008a00" stroke="#005700" pointer-events="none"/><g fill="#ffffff" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-1042-422-288-0)" font-size="12px"><text x="5.5" y="1054.5">private:</text><text x="5.5" y="1068.5"> // Private Methods</text><text x="5.5" y="1082.5">  // nextBuff returns a reference to the next buffer that should be modified.</text><text x="5.5" y="1096.5">  inline cl::Buffer&amp; NextBuff() { return buffers_[buffer_index_]; }</text><text x="5.5" y="1110.5">  // prevBuff returns a reference to the previous buffer that was modified.</text><text x="5.5" y="1124.5">  inline cl::Buffer&amp; PrevBuff() { return buffers_[buffer_index_ ^ 1]; }</text><text x="5.5" y="1138.5">  // Advance the buffer. Note there's only two, so right now it just swaps</text><text x="5.5" y="1152.5">  // to the other buffer.</text><text x="5.5" y="1166.5">  inline void AdvanceBuff() { buffer_index_ ^= 1; }</text><text x="5.5" y="1180.5">  // returns the "desirable" device. If a discrete GPU is detected, then it</text><text x="5.5" y="1194.5">  // will be preferred over integrated graphics. If devices is empty, then the</text><text x="5.5" y="1208.5">  // this will throw std::out_of_range.</text><text x="5.5" y="1222.5">  cl::Device&amp; GetBestDevice();</text><text x="5.5" y="1236.5">  // Return the relative path to the cpu or gpu  kernel given a filename</text><text x="5.5" y="1250.5">  // e.g. KernelPath("mykernel.cl", true); // returns: kernels/gpu/mykerne.cl</text><text x="5.5" y="1264.5">  std::string KernelPath(std::string filename, bool use_gpu);</text><text x="5.5" y="1278.5">  // Given a filename (without its path) load and return the kernel.</text><text x="5.5" y="1292.5">  cl::Kernel LoadKernel(std::string filename, std::string kernel_name,</text><text x="5.5" y="1306.5">                        bool use_gpu);</text></g><path d="M 0 1351 L 430 1351" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><rect x="0" y="1377" width="430" height="338" fill="#008a00" stroke="#005700" pointer-events="none"/><g fill="#ffffff" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4-1382-422-338-0)" font-size="12px"><text x="5.5" y="1394.5">public:</text><text x="5.5" y="1408.5">  // If use_gpu is true, this image processor will attempt to use the GPU</text><text x="5.5" y="1422.5">  OpenclImageProcessor(bool use_gpu = true);</text><text x="5.5" y="1436.5">  // outputs basic information about the device in use.</text><text x="5.5" y="1450.5">  void DeviceInfo();</text><text x="5.5" y="1464.5">  // Loads image. Note that input is assumed to be 8 bit 1 channel grayscale.</text><text x="5.5" y="1478.5">  void LoadImage(cv::Mat&amp; input);</text><text x="5.5" y="1492.5">  // Block until all other operations are complete and then return the cv::Mat</text><text x="5.5" y="1506.5">  // corresponding to the output of previously enqueued operations.</text><text x="5.5" y="1520.5">  cv::Mat output();</text><text x="5.5" y="1534.5">  // Blocking call which finishes all commands in queue. Useful for</text><text x="5.5" y="1548.5">  // benchmarking purposes, so that you can time a subset of an operation.</text><text x="5.5" y="1562.5">  void FinishJobs();</text><text x="5.5" y="1576.5">  // Enqueue the Gaussian blur operation. This is a non-blocking call.</text><text x="5.5" y="1590.5">  void Gaussian();</text><text x="5.5" y="1604.5">  // Enqueue the Sobel Filtering operation. This is a non-blocking call.</text><text x="5.5" y="1618.5">  void Sobel();</text><text x="5.5" y="1632.5">  // Enqueue the Non-maximum suppression operation. This is a non-blocking call.</text><text x="5.5" y="1646.5">  void NonMaxSuppression();</text><text x="5.5" y="1660.5">  // Enqueue the Hysteresis Thresholding operation. This is a non-blocking call.</text><text x="5.5" y="1674.5">  void HysteresisThresholding();</text><text x="5.5" y="1688.5">  // Enqueue all stages. This is a non-blocking call.</text><text x="5.5" y="1702.5">  void Canny();</text></g><path d="M 1002 1265 L 1212 1265 L 1212 1447 L 1420.63 1447" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1425.88 1447 L 1418.88 1450.5 L 1420.63 1447 L 1418.88 1443.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1452px; margin-left: 1325px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">返回kernel路径信息 的函数</div></div></div></foreignObject><text x="1325" y="1455" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">返回ke...</text></switch></g><path d="M 1002 1265 L 1092 1265 L 1092 1802 L 1392.63 1802" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1397.88 1802 L 1390.88 1805.5 L 1392.63 1802 L 1390.88 1798.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1807px; margin-left: 1215px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">加载 kernel 文件 的函数</div></div></div></foreignObject><text x="1215" y="1810" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">加载 k...</text></switch></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-576-1220-422-100-0)" font-size="12px"><text x="577.5" y="1232.5">private:</text><text x="577.5" y="1246.5">  // e.g. KernelPath("mykernel.cl", true); // returns: kernels/gpu/mykerne.cl</text><text x="577.5" y="1260.5">  std::string KernelPath(std::string filename, bool use_gpu);</text><text x="577.5" y="1274.5">  // Given a filename (without its path) load and return the kernel.</text><text x="577.5" y="1288.5">  cl::Kernel LoadKernel(std::string filename, std::string kernel_name,</text><text x="577.5" y="1302.5">                        bool use_gpu);</text></g><path d="M 430.43 1264.23 L 501 1264 L 565.63 1264.91" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 570.88 1264.98 L 563.83 1268.39 L 565.63 1264.91 L 563.93 1261.39 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1270px; margin-left: 495px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">加载kernel 文件</div></div></div></foreignObject><text x="495" y="1273" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">加载ke...</text></switch></g><path d="M 1857 1447 L 2172.63 1447" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2177.88 1447 L 2170.88 1450.5 L 2172.63 1447 L 2170.88 1443.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1431-1422-422-60-0)" font-size="12px"><text x="1432.5" y="1434.5">private:</text><text x="1432.5" y="1448.5">  // e.g. KernelPath("mykernel.cl", true); // returns: kernels/gpu/mykerne.cl</text><text x="1432.5" y="1462.5">  std::string KernelPath(std::string filename, bool use_gpu);</text></g><path d="M 2384.54 1549.9 L 2384.09 1580.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2384.02 1585.88 L 2380.62 1578.83 L 2384.09 1580.63 L 2387.62 1578.93 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2183-1347-422-210-0)" font-size="12px"><text x="2184.5" y="1359.5">/***  Private Methods  ********************************************************/</text><text x="2184.5" y="1373.5">// Return the relative path to the cpu or gpu  kernel given a filename</text><text x="2184.5" y="1387.5">// e.g. KernelPath("mykernel.cl", true); // returns: kernels/gpu/mykerne.cl</text><text x="2184.5" y="1415.5">string OpenclImageProcessor::KernelPath(std::string filename, bool use_gpu) {</text><text x="2184.5" y="1429.5">  // this is not platform independent and should be rewritten if that becomes</text><text x="2184.5" y="1443.5">  // a requirement.</text><text x="2184.5" y="1457.5">  string path = "kernels/";</text><text x="2184.5" y="1471.5">  if (use_gpu)</text><text x="2184.5" y="1485.5">    path += "gpu/";</text><text x="2184.5" y="1499.5">  else</text><text x="2184.5" y="1513.5">    path += "cpu/";</text><text x="2184.5" y="1527.5">  path += filename;</text><text x="2184.5" y="1541.5">  return path;</text><text x="2184.5" y="1555.5">}</text></g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1422px; margin-left: 2017px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: nowrap;">返回kernel路径信息</div></div></div></foreignObject><text x="2017" y="1426" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">返回kernel路径信息</text></switch></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1403-1777-422-60-0)" font-size="12px"><text x="1404.5" y="1789.5"> // Given a filename (without its path) load and return the kernel.</text><text x="1404.5" y="1803.5">  cl::Kernel LoadKernel(std::string filename, std::string kernel_name,</text><text x="1404.5" y="1817.5">                        bool use_gpu);</text></g><path d="M 1829 1802 L 1999 1802 L 2162.63 1802" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2167.88 1802 L 2160.88 1805.5 L 2162.63 1802 L 2160.88 1798.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2599 1777 L 2842.63 1777" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2847.88 1777 L 2840.88 1780.5 L 2842.63 1777 L 2840.88 1773.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2173-1602-422-360-0)" font-size="12px"><text x="2174.5" y="1614.5">cl::Kernel OpenclImageProcessor::LoadKernel(string filename, string kernel_name,</text><text x="2174.5" y="1628.5">        bool use_gpu) {</text><text x="2174.5" y="1642.5">  ifstream cl_file(KernelPath(filename, use_gpu));</text><text x="2174.5" y="1656.5">  if (!cl_file.good())</text><text x="2174.5" y="1670.5">    cerr &lt;&lt; "Couldn't open " &lt;&lt; KernelPath(filename, use_gpu) &lt;&lt; endl;</text><text x="2174.5" y="1684.5">  string cl_string(istreambuf_iterator&lt;char&gt;(cl_file),</text><text x="2174.5" y="1698.5">                   (istreambuf_iterator&lt;char&gt;()));</text><text x="2174.5" y="1712.5">  cl::Program::Sources source(</text><text x="2174.5" y="1726.5">      1, make_pair(cl_string.c_str(), cl_string.length() + 1));</text><text x="2174.5" y="1740.5">  cl::Program program(context_, source);</text><text x="2174.5" y="1754.5">  try {</text><text x="2174.5" y="1768.5">    program.build(devices_);</text><text x="2174.5" y="1782.5">  } catch (cl::Error e) {</text><text x="2174.5" y="1796.5">    // If there's a build error, print out the build log to see what</text><text x="2174.5" y="1810.5">    // exactly the problem was.</text><text x="2174.5" y="1824.5">    cerr &lt;&lt; "Build Status:\t"</text><text x="2174.5" y="1838.5">         &lt;&lt; program.getBuildInfo&lt;CL_PROGRAM_BUILD_STATUS&gt;(selected_device_)</text><text x="2174.5" y="1852.5">         &lt;&lt; endl &lt;&lt; "Build Options:\t"</text><text x="2174.5" y="1866.5">         &lt;&lt; program.getBuildInfo&lt;CL_PROGRAM_BUILD_OPTIONS&gt;(selected_device_)</text><text x="2174.5" y="1880.5">         &lt;&lt; endl &lt;&lt; "Build Log:\t "</text><text x="2174.5" y="1894.5">         &lt;&lt; program.getBuildInfo&lt;CL_PROGRAM_BUILD_LOG&gt;(selected_device_) &lt;&lt; endl;</text><text x="2174.5" y="1908.5">  }</text><text x="2174.5" y="1922.5">  return cl::Kernel(program, kernel_name.c_str());</text></g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1777px; margin-left: 2012px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: nowrap;">加载kernel</div></div></div></foreignObject><text x="2012" y="1781" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">加载kernel</text></switch></g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 1567px; margin-left: 2390px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;">KernelPath</div></div></div></foreignObject><text x="2419" y="1571" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">KernelPath</text></switch></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2853-1447-712-670-0)" font-size="12px"><text x="2854.5" y="1459.5">// ifstream 是 C++ 标准库中用于读取文件的输入流类，全称为 input file stream。它是 fstream 类的派生类，</text><text x="2854.5" y="1473.5">// 用于从文件中读取数据。与 fstream 不同的是，ifstream 对象只能用于读取文件，而不能用于写入文件。</text><text x="2854.5" y="1487.5">ifstream cl_file(KernelPath(filename, use_gpu));</text><text x="2854.5" y="1515.5">// 判断 ifstream 对象 是否能打开</text><text x="2854.5" y="1529.5">cl_file.good()</text><text x="2854.5" y="1557.5">// 构造一个字符串对象，将文件全部内容转换为字符串。</text><text x="2854.5" y="1571.5">// istreambuf_iterator&lt;char&gt;(cl_file) 是一个迭代器对象，</text><text x="2854.5" y="1585.5">// 我们将这个迭代器对象作为 std::string 构造函数的第一个参数，表示读取的起始位置。</text><text x="2854.5" y="1599.5">// std::string 构造函数的第二个参数使用了另一个 istreambuf_iterator&lt;char&gt; 类型的默认构造函数，</text><text x="2854.5" y="1613.5">// 表示读取的终止位置，即读取整个输入流的内容。</text><text x="2854.5" y="1641.5">string cl_string(istreambuf_iterator&lt;char&gt;(cl_file),</text><text x="2854.5" y="1655.5">                        (istreambuf_iterator&lt;char&gt;() ) );</text><text x="2854.5" y="1683.5">// 构造 kernel 程序 的源码对象</text><text x="2854.5" y="1697.5">cl::Program::Sources source( 1, make_pair(cl_string.c_str(), cl_string.length() + 1));</text><text x="2854.5" y="1725.5">// 构造 kernel 程序 对象， context_ 是当前对象初始化时构造的上下文</text><text x="2854.5" y="1739.5">cl::Program program(context_, source);</text><text x="2854.5" y="1767.5">// 这段代码使用了 OpenCL 编程框架来编译并构建一个程序对象 (cl::Program)，其中 context_ 是程序上下文对象，</text><text x="2854.5" y="1781.5">// source 是程序源代码字符串，devices_ 是用于编译程序的设备列表。</text><text x="2854.5" y="1795.5">// 首先，通过 cl::Program 类的构造函数创建一个程序对象 program，</text><text x="2854.5" y="1809.5">// 并将上下文对象 context_ 和程序源代码字符串 source 作为参数传入。</text><text x="2854.5" y="1823.5">// 这个构造函数会自动将源代码编译成针对给定设备的可执行代码。</text><text x="2854.5" y="1837.5">// 接着，通过 program.build(devices_) 函数来编译并构建程序。</text><text x="2854.5" y="1851.5">// devices_ 参数是一个 cl::vector 类型的设备列表，表示编译程序的目标设备。</text><text x="2854.5" y="1865.5">// 编译完成后，可以向目标设备提交任务并执行程序。</text><text x="2854.5" y="1879.5">// 需要注意的是，在编译程序时可能会出现错误，例如代码中使用了不支持的指令或语言特性等。</text><text x="2854.5" y="1893.5">// 为了处理这些错误并进行调试，通常需要将 program.build 函数放在 try-catch 块中，以捕获任何可能的异常并进行相应的处理。 </text><text x="2854.5" y="1921.5">try { program.build(devices_);}</text><text x="2854.5" y="1963.5">// 这段代码使用了 OpenCL 编程框架来创建一个内核对象 (cl::Kernel)，其中 program 是程序对象，kernel_name 是内核函数的名称。</text><text x="2854.5" y="1977.5">// cl::Kernel 类的构造函数需要传入两个参数：程序对象 program 和内核函数的名称 kernel_name，</text><text x="2854.5" y="1991.5">// 这样就可以根据给定的程序对象和内核函数名称创建一个内核对象。内核对象是一个执行单元，</text><text x="2854.5" y="2005.5">// 可以在指定的设备上执行内核函数，从而完成特定的计算任务。</text><text x="2854.5" y="2019.5">// 这段代码返回的是创建好的内核对象，可以在之后的程序中使用该对象来执行内核函数。</text><text x="2854.5" y="2033.5">// 例如，可以通过调用 cl::CommandQueue 类中的 enqueueNDRangeKernel 函数来提交一个内核函数执行的命令，</text><text x="2854.5" y="2047.5">// 从而在指定设备上执行内核函数。</text><text x="2854.5" y="2075.5">return cl::Kernel(program, kernel_name.c_str());</text></g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1752px; margin-left: 2689px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: nowrap;">LoadKernel 函数解释</div></div></div></foreignObject><text x="2689" y="1756" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">LoadKernel 函数解释</text></switch></g><path d="M 2609 1402 L 2855.63 1402" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2860.88 1402 L 2853.88 1405.5 L 2855.63 1402 L 2853.88 1398.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2866-1380-602-55-0)" font-size="12px"><text x="2867.5" y="1392.5">// 存放 kernel 的文件路径，里面保存了各种 kernel ， 用于在GPU 的 kernel 执行。</text><text x="2867.5" y="1406.5"> string path = "kernels/";</text></g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1377px; margin-left: 2699px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: nowrap;">KernelPath 函数解释</div></div></div></foreignObject><text x="2699" y="1381" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">KernelPath 函数解释</text></switch></g><path d="M 1032 4184 L 1107 4184 L 1175.33 4184.16" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1180.58 4184.18 L 1173.57 4187.66 L 1175.33 4184.16 L 1173.59 4180.66 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="#67de17" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-736-4155-292-68-0)" font-size="12px"><text x="737.5" y="4181.5">  // Enqueue all stages. This is a non-blocking call.</text><text x="737.5" y="4195.5">  void Canny();</text></g><path d="M 223.94 1675.03 L 225 4182 L 712 4182 L 723.53 4182.15" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 728.78 4182.22 L 721.74 4185.63 L 723.53 4182.15 L 721.83 4178.63 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1785px; margin-left: 230px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">Canny 函数</div></div></div></foreignObject><text x="230" y="1788" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">Ca...</text></switch></g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 4189px; margin-left: 513px;"><div data-drawio-colors="color: #67de17; background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(103, 222, 23); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">Canny 函数 ，主要的函数</div></div></div></foreignObject><text x="513" y="4192" fill="#67de17" font-family="Helvetica" font-size="11px" text-anchor="middle">Ca...</text></switch></g><path d="M 1482 4173 L 1572.63 4173" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1577.88 4173 L 1570.88 4176.5 L 1572.63 4173 L 1570.88 4169.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 4180px; margin-left: 1527px;"><div data-drawio-colors="color: #67de17; background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(103, 222, 23); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">函数解释</div></div></div></foreignObject><text x="1527" y="4183" fill="#67de17" font-family="Helvetica" font-size="11px" text-anchor="middle">函数解释</text></switch></g><g fill="#67de17" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1186-4113-292-130-0)" font-size="12px"><text x="1187.5" y="4125.5">// enqueues all of the canny stages</text><text x="1187.5" y="4139.5">void OpenclImageProcessor::Canny() {</text><text x="1187.5" y="4153.5">  Gaussian();</text><text x="1187.5" y="4167.5">  Sobel();</text><text x="1187.5" y="4181.5">  NonMaxSuppression();</text><text x="1187.5" y="4195.5">  HysteresisThresholding();</text><text x="1187.5" y="4209.5">}</text><text x="1187.5" y="4223.5">}</text></g><path d="M 1122 2221 L 1347.63 2221" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1352.88 2221 L 1345.88 2224.5 L 1347.63 2221 L 1345.88 2217.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-826-2209-292-34-0)" font-size="12px"><text x="827.5" y="2221.5">OpenclImageProcessor(bool use_gpu = true);</text></g><path d="M 429.57 1403.7 L 742 1404 L 742 2215 L 815.63 2215" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 820.88 2215 L 813.88 2218.5 L 815.63 2215 L 813.88 2211.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1380px; margin-left: 517px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: nowrap;">构造函数</div></div></div></foreignObject><text x="517" y="1384" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">构造函数</text></switch></g><path d="M 1822 2221 L 2155.63 2221" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2160.88 2221 L 2153.88 2224.5 L 2155.63 2221 L 2153.88 2217.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 2227px; margin-left: 1957px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">解释构造函数</div></div></div></foreignObject><text x="1957" y="2230" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">解释构造函数</text></switch></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1358-2002-460-448-0)" font-size="12px"><text x="1359.5" y="2014.5">// Perform all OpenCL setup steps required to have an operational image</text><text x="1359.5" y="2028.5">// processor</text><text x="1359.5" y="2042.5">OpenclImageProcessor::OpenclImageProcessor(bool use_gpu) {</text><text x="1359.5" y="2056.5">  // Determine the NDRange size for each group. This should be made more</text><text x="1359.5" y="2070.5">  // general in the future, but it works on most hardware for now.</text><text x="1359.5" y="2084.5">  if (use_gpu)</text><text x="1359.5" y="2098.5">    workgroup_size_ = 16;</text><text x="1359.5" y="2112.5">  else</text><text x="1359.5" y="2126.5">    workgroup_size_ = 1;</text><text x="1359.5" y="2140.5">  // Initialize OpenCL</text><text x="1359.5" y="2154.5">  try {</text><text x="1359.5" y="2168.5">    cl::Platform::get(&amp;platforms_);</text><text x="1359.5" y="2182.5">    if (use_gpu)</text><text x="1359.5" y="2196.5">      platforms_[0].getDevices(CL_DEVICE_TYPE_GPU, &amp;devices_);</text><text x="1359.5" y="2210.5">    else</text><text x="1359.5" y="2224.5">      platforms_[0].getDevices(CL_DEVICE_TYPE_CPU, &amp;devices_);</text><text x="1359.5" y="2238.5">    selected_device_ = GetBestDevice();</text><text x="1359.5" y="2252.5">    context_ = cl::Context(devices_);</text><text x="1359.5" y="2266.5">    queue_ = cl::CommandQueue(context_, selected_device_);</text><text x="1359.5" y="2280.5">    // create and load the kernels</text><text x="1359.5" y="2294.5">    gaussian_ = LoadKernel("gaussian_kernel.cl", "gaussian_kernel", use_gpu);</text><text x="1359.5" y="2308.5">    sobel_ = LoadKernel("sobel_kernel.cl", "sobel_kernel", use_gpu);</text><text x="1359.5" y="2322.5">    non_max_suppression_ =</text><text x="1359.5" y="2336.5">           LoadKernel("non_max_supp_kernel.cl", "non_max_supp_kernel", use_gpu);</text><text x="1359.5" y="2350.5">    hysteresis_thresholding_ =</text><text x="1359.5" y="2364.5">           LoadKernel("hyst_kernel.cl", "hyst_kernel", use_gpu);</text><text x="1359.5" y="2378.5">  } catch (cl::Error e) {</text><text x="1359.5" y="2392.5">    cerr &lt;&lt; endl &lt;&lt; "Error: " &lt;&lt; e.what() &lt;&lt; " : " &lt;&lt; e.err() &lt;&lt; endl;</text><text x="1359.5" y="2406.5">  }</text><text x="1359.5" y="2420.5">}</text></g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 2241px; margin-left: 1194px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: nowrap;">构造函数</div></div></div></foreignObject><text x="1194" y="2245" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">构造函数</text></switch></g><path d="M 2585 2221 L 2665.63 2221" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2670.88 2221 L 2663.88 2224.5 L 2665.63 2221 L 2663.88 2217.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2166-2040-415-372-0)" font-size="12px"><rect fill="none" stroke="#1127F0" x="2167" y="2043" width="414" height="361" stroke-width="1"/><text x="2167.5" y="2052.5">// platforms_ 是 当前对象的变量，这里调用函数将平台信息保存到该变量中</text><text x="2167.5" y="2066.5">// platforms_ 是 个容器对象： 原来定义：std::vector&lt;cl::Platform&gt; platforms_;</text><text x="2167.5" y="2094.5">cl::Platform::get(&amp;platforms_);</text><text x="2167.5" y="2122.5">// 使用cl::Platform 对象 获取gpu设备信息， 保存在 devices_ ， 它也是个容器</text><text x="2167.5" y="2136.5">// std::vector&lt;cl::Device&gt; devices_;</text><text x="2167.5" y="2164.5">platforms_[0].getDevices(CL_DEVICE_TYPE_GPU, &amp;devices_);</text><text x="2167.5" y="2192.5">// 从devices_  返回一个最好的设备</text><text x="2167.5" y="2206.5">selected_device_ = GetBestDevice();</text><text x="2167.5" y="2234.5">// 构建上下文对象， 创建命令队列（输入：context, selected_device_）</text><text x="2167.5" y="2248.5">context_ = cl::Context(devices_);</text><text x="2167.5" y="2262.5">queue_ = cl::CommandQueue(context_, selected_device_);</text><text x="2167.5" y="2290.5">// 加载 高斯 内核文件， 返回 内核对象 (cl::Kernel)</text><text x="2167.5" y="2304.5">// create and load the kernels</text><text x="2167.5" y="2318.5">gaussian_ = LoadKernel("gaussian_kernel.cl", "gaussian_kernel", use_gpu);</text><text x="2167.5" y="2346.5">// 加载 sobel 内核文件， 返回 内核对象 (cl::Kernel)</text><text x="2167.5" y="2360.5">sobel_ = LoadKernel("sobel_kernel.cl", "sobel_kernel", use_gpu);</text><text x="2167.5" y="2388.5">后面的分别是 极大值抑制、滞后阈值的代码。</text></g><path d="M 722 1181 L 875.63 1181" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 880.88 1181 L 873.88 1184.5 L 875.63 1181 L 873.88 1177.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-546-1171-172-30-0)" font-size="12px"><text x="547.5" y="1183.5">cl::Device&amp; GetBestDevice();</text></g><path d="M 430 1181 L 535.63 1181" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 540.88 1181 L 533.88 1184.5 L 535.63 1181 L 533.88 1177.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1062 1181 L 1335 1181 L 1335 1246 L 1600.63 1246" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1605.88 1246 L 1598.88 1249.5 L 1600.63 1246 L 1598.88 1242.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-886-1171-172-30-0)" font-size="12px"><text x="887.5" y="1183.5">cl::Device&amp; GetBestDevice();</text></g><path d="M 2067 1246 L 2160 1246 L 2245.63 1246" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2250.88 1246 L 2243.88 1249.5 L 2245.63 1246 L 2243.88 1242.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1611-1146-452-210-0)" font-size="12px"><text x="1612.5" y="1158.5">// Returns (hopefully) the discrete GPU in devices. If none are found, then the</text><text x="1612.5" y="1172.5">// first GPU is returned.</text><text x="1612.5" y="1186.5">cl::Device &amp;OpenclImageProcessor::GetBestDevice() {</text><text x="1612.5" y="1200.5">  if (devices_.size() == 0)</text><text x="1612.5" y="1214.5">    throw std::out_of_range("No devices in devices vector.");</text><text x="1612.5" y="1228.5">  // look for nvidia, amd, or ati. This may yield a false positive for</text><text x="1612.5" y="1242.5">  // integrated amd GPUs, but it's better than the current solution.</text><text x="1612.5" y="1256.5">  std::regex valid_device("(NVIDIA|AMD|ATI)", std::regex_constants::icase);</text><text x="1612.5" y="1270.5">  for (auto &amp;d : devices_) {</text><text x="1612.5" y="1284.5">    if (std::regex_search(d.getInfo&lt;CL_DEVICE_VENDOR&gt;(), valid_device))</text><text x="1612.5" y="1298.5">      return d;</text><text x="1612.5" y="1312.5">  }</text><text x="1612.5" y="1326.5">  return devices_[0];</text><text x="1612.5" y="1340.5">}</text></g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1160px; margin-left: 487px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: nowrap;">获取最好的设备</div></div></div></foreignObject><text x="487" y="1164" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">获取最好的设备</text></switch></g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1230px; margin-left: 1499px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: nowrap;">GetBestDevice()函数实现</div></div></div></foreignObject><text x="1499" y="1234" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">GetBestDevice()函数实现</text></switch></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2256-1176-787-151-0)" font-size="12px"><text x="2257.5" y="1202.25">// 这是 C++11 中的一种范围循环语法，也称为 for-each 循环。它用于遍历一个容器中的元素，每次循环将容器中的一个元素赋值给循环变量。</text><text x="2257.5" y="1216.25">// 具体来说，在这段代码中，auto &amp;d 定义了一个循环变量 d，它的类型由编译器自动推导得出，可以理解为 devices_ 容器中存储的元素类型的引用。</text><text x="2257.5" y="1230.25">// 后面的 devices_ 表示要遍历的容器，即设备列表。整个语法结构可以理解为“对于设备列表中的每一个设备（即容器中的每个元素），</text><text x="2257.5" y="1244.25">// d将其引用赋值给变量 d，然后执行循环体”。</text><text x="2257.5" y="1258.25">// 使用范围循环的好处是代码更加简洁，避免了手动维护循环变量的麻烦。同时，它也可以避免一些常见的错误，例如数组越界、迭代器失效等。</text><text x="2257.5" y="1286.25">for ( auto &amp;d : devices_)</text></g><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1230px; margin-left: 2162px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: nowrap;">GetBestDevice()函数解释</div></div></div></foreignObject><text x="2162" y="1234" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">GetBestDevice()函数解释</text></switch></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-806-2770-202-38-0)" font-size="12px"><text x="807.5" y="2782.5">void LoadImage(cv::Mat&amp; input);</text></g><path d="M 430 1546 L 692 1546 L 692 2785 L 795.63 2785" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 800.88 2785 L 793.88 2788.5 L 795.63 2785 L 793.88 2781.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1550px; margin-left: 502px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">加载图片，使用缓存</div></div></div></foreignObject><text x="502" y="1553" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">加载图片，使用缓存</text></switch></g><path d="M 1829 2795 L 2045.63 2795" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2050.88 2795 L 2043.88 2798.5 L 2045.63 2795 L 2043.88 2791.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 2799px; margin-left: 1934px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">LoadImage函数解释</div></div></div></foreignObject><text x="1934" y="2802" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">Lo...</text></switch></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1313-2565-512-470-0)" font-size="12px"><text x="1314.5" y="2577.5">void OpenclImageProcessor::LoadImage(cv::Mat &amp;image_input) {</text><text x="1314.5" y="2591.5">  // We want the rows and columns to be an integer multiple of groupSize *after*</text><text x="1314.5" y="2605.5">  // 2 is subtracted from them, since all of our kernels do not run edge</text><text x="1314.5" y="2619.5">  // pixels. The following math yields the following results with groupSize=16</text><text x="1314.5" y="2633.5">  // (using small integers for obviousness):</text><text x="1314.5" y="2647.5">  // input size   desired size</text><text x="1314.5" y="2661.5">  // 31           18</text><text x="1314.5" y="2675.5">  // 32           18</text><text x="1314.5" y="2689.5">  // 33           18</text><text x="1314.5" y="2703.5">  // 34           34</text><text x="1314.5" y="2717.5">  // 35           34</text><text x="1314.5" y="2731.5">  int rows = ((image_input.rows - 2) / workgroup_size_) * workgroup_size_ + 2;</text><text x="1314.5" y="2745.5">  int cols = ((image_input.cols - 2) / workgroup_size_) * workgroup_size_ + 2;</text><text x="1314.5" y="2759.5">  // Use these new row/cols to create a rectangle which will serve as our crop</text><text x="1314.5" y="2773.5">  cv::Rect croppedArea(0, 0, cols, rows);</text><text x="1314.5" y="2787.5">  // Crop the image and clone it. If it's not cloned, then the layout of the</text><text x="1314.5" y="2801.5">  // data won't change, so our kernels wouldn't be writing to the correct</text><text x="1314.5" y="2815.5">  // location. This could be a place of likely inefficiency. It might be</text><text x="1314.5" y="2829.5">  // better to move towards not actually cropping the image, instead doing</text><text x="1314.5" y="2843.5">  // more work in the kernel.</text><text x="1314.5" y="2857.5">  this-&gt;input_ = image_input(croppedArea).clone();</text><text x="1314.5" y="2871.5">  output_ = cv::Mat(input_.rows, input_.cols, CV_8UC1);</text><text x="1314.5" y="2885.5">    NextBuff() = cl::Buffer(</text><text x="1314.5" y="2899.5">          context_, CL_MEM_READ_WRITE | CL_MEM_ALLOC_HOST_PTR | CL_MEM_COPY_HOST_PTR,</text><text x="1314.5" y="2913.5">      input_.rows * input_.cols * input_.elemSize(), input_.data);</text><text x="1314.5" y="2927.5">    PrevBuff() = cl::Buffer(context_, CL_MEM_READ_WRITE | CL_MEM_ALLOC_HOST_PTR,</text><text x="1314.5" y="2941.5">                          input_.rows * input_.cols * input_.elemSize());</text><text x="1314.5" y="2955.5">  // Initialize the theta buffer</text><text x="1314.5" y="2969.5">  theta_ = cl::Buffer(context_, CL_MEM_READ_WRITE | CL_MEM_ALLOC_HOST_PTR,</text><text x="1314.5" y="2983.5">                     input_.rows * input_.cols * input_.elemSize());</text><text x="1314.5" y="2997.5">    AdvanceBuff();</text><text x="1314.5" y="3011.5">}</text></g><path d="M 1012 2784 L 1302.63 2784" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1307.88 2784 L 1300.88 2787.5 L 1302.63 2784 L 1300.88 2780.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2812 2795 L 2965.63 2795" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2970.88 2795 L 2963.88 2798.5 L 2965.63 2795 L 2963.88 2791.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 2800px; margin-left: 2907px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">总结</div></div></div></foreignObject><text x="2907" y="2803" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">总结</text></switch></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2056-2460-752-680-0)" font-size="12px"><text x="2057.5" y="2472.5">- #area/programming</text><text x="2057.5" y="2486.5">#que OpenclImageProcessor::LoadImage(cv::Mat &amp;image_input) 的解释, 这个是canny opencl 实现的一部分</text><text x="2057.5" y="2500.5">- #ans</text><text x="2057.5" y="2514.5">```c++</text><text x="2057.5" y="2528.5">//   for adaptation to workgroup_size_  , need cut origin image ，workgroup_size_ // is 16，that represent gpu workgroup size.</text><text x="2057.5" y="2556.5">int rows = ((image_input.rows - 2) / workgroup_size_) * workgroup_size_ + 2;</text><text x="2057.5" y="2570.5">int cols = ((image_input.cols - 2) / workgroup_size_) * workgroup_size_ + 2;</text><text x="2057.5" y="2598.5">// create rect area in the origin image by new cols and new rows</text><text x="2057.5" y="2612.5">cv::Rect croppedArea(0, 0, cols, rows);</text><text x="2057.5" y="2640.5">// clone origin image ,so the layout of data will chang, so the kernels will writing // to the correct location.</text><text x="2057.5" y="2654.5">this-&gt;input_ = image_input(croppedArea).clone();</text><text x="2057.5" y="2682.5">// create mat object store  output</text><text x="2057.5" y="2696.5">output_ = cv::Mat(input_.rows, input_.cols, CV_8UC1);</text><text x="2057.5" y="2724.5">// create Buffer object</text><text x="2057.5" y="2738.5">NextBuff() = cl::Buffer(</text><text x="2057.5" y="2752.5">      context_, CL_MEM_READ_WRITE | CL_MEM_ALLOC_HOST_PTR | CL_MEM_COPY_HOST_PTR,</text><text x="2057.5" y="2766.5">  input_.rows * input_.cols * input_.elemSize(), input_.data);</text><text x="2057.5" y="2780.5">PrevBuff() = cl::Buffer(context_, CL_MEM_READ_WRITE | CL_MEM_ALLOC_HOST_PTR,</text><text x="2057.5" y="2794.5">                      input_.rows * input_.cols * input_.elemSize());</text><text x="2057.5" y="2822.5">```</text><text x="2057.5" y="2836.5">定义了两个`buffer`, 还定义了两个函数，其中NextBuff() 返回下标`buffer_index_`的缓存引用，PrevBuff()返回另外一个。</text><text x="2057.5" y="2850.5">根据 OpenCL 1.2 规范，CL_MEM_ALLOC_HOST_PTR 标志指示 OpenCL 运行时系统为缓冲区分配主机可访问的内存空间，</text><text x="2057.5" y="2864.5">并通过 clEnqueueMapBuffer 或 clEnqueueMapImage 等函数将缓冲区映射到主机内存空间中，以便主机程序可以直接访问缓冲区中的数据。</text><text x="2057.5" y="2878.5">这种方法可以避免在主机和设备之间频繁地复制数据，从而提高数据传输的效率。</text><text x="2057.5" y="2892.5">使用了 CL_MEM_ALLOC_HOST_PTR 标志，表明 OpenCL 运行时系统会为缓冲区分配主机可访问的内存空间，</text><text x="2057.5" y="2906.5">并将缓冲区映射到主机内存空间中，以便主机程序直接访问缓冲区中的数据。在这种情况下，缓冲区的内存空间只在主机上分配了一次，</text><text x="2057.5" y="2920.5">而在设备上并没有分配内存空间。当主机程序访问缓冲区时，OpenCL 运行时系统将负责将数据从主机内存传输到设备内存中，</text><text x="2057.5" y="2934.5">以便设备程序可以访问数据。当设备程序访问缓冲区时，OpenCL 运行时系统将负责将数据从设备内存传输到主机内存中，</text><text x="2057.5" y="2948.5">以便主机程序可以访问数据。</text><text x="2057.5" y="2976.5">`CL_MEM_READ_WRITE`: 分配的内存可以读可写</text><text x="2057.5" y="2990.5">`CL_MEM_ALLOC_HOST_PTR`: 主机内存与设备内存都分配了空间</text><text x="2057.5" y="3004.5">`CL_MEM_COPY_HOST_PTR`: 标志用于指定缓冲区对象初始化时从主机内存中拷贝数据到设备内存中。这意味着在创建缓冲区对象时，</text><text x="2057.5" y="3018.5">OpenCL 运行时系统会将 `input_.data` 指向的数据从主机内存中拷贝到设备内存中的对应位置。</text><text x="2057.5" y="3060.5">```c++</text><text x="2057.5" y="3074.5">  // Initialize the theta buffer</text><text x="2057.5" y="3088.5">  theta_ = cl::Buffer(context_, CL_MEM_READ_WRITE | CL_MEM_ALLOC_HOST_PTR,</text><text x="2057.5" y="3102.5">                     input_.rows * input_.cols * input_.elemSize());</text><text x="2057.5" y="3116.5">```</text><text x="2057.5" y="3130.5">存放 梯度角度的缓存</text><text x="2057.5" y="3158.5">```c++</text><text x="2057.5" y="3172.5">AdvanceBuff();</text><text x="2057.5" y="3186.5">}</text><text x="2057.5" y="3200.5">```</text><text x="2057.5" y="3214.5">交换缓存，输入缓存、输出缓存交换位置。</text></g><path d="M 892 3541.25 L 1085.63 3541.25" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1090.88 3541.25 L 1083.88 3544.75 L 1085.63 3541.25 L 1083.88 3537.75 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 3547px; margin-left: 967px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">Gaussian 函数实现</div></div></div></foreignObject><text x="967" y="3551" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">Ga...</text></switch></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-686-3527-202-38-0)" font-size="12px"><text x="687.5" y="3539.75">void LoadImage(cv::Mat&amp; input);</text></g><path d="M 430 1615.97 L 622 1615 L 622 3545 L 675.63 3545" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 680.88 3545 L 673.88 3548.5 L 675.63 3545 L 673.88 3541.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1623px; margin-left: 485px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">Gaussian()</div></div></div></foreignObject><text x="485" y="1626" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">Ga...</text></switch></g><path d="M 1512 3541 L 2197 3541 L 2875.63 3541" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 2880.88 3541 L 2873.88 3544.5 L 2875.63 3541 L 2873.88 3537.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 3547px; margin-left: 2027px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">Gaussian  函数解释</div></div></div></foreignObject><text x="2027" y="3550" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">Ga...</text></switch></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1096-3416-412-260-0)" font-size="12px"><text x="1097.5" y="3428.75">// enqueues the gaussian kernel</text><text x="1097.5" y="3442.75">void OpenclImageProcessor::Gaussian() {</text><text x="1097.5" y="3456.75">  try {</text><text x="1097.5" y="3470.75">    gaussian_.setArg(0, PrevBuff());</text><text x="1097.5" y="3484.75">    gaussian_.setArg(1, NextBuff());</text><text x="1097.5" y="3498.75">    gaussian_.setArg(2, input_.rows);</text><text x="1097.5" y="3512.75">    gaussian_.setArg(3, input_.cols);</text><text x="1097.5" y="3526.75">    // 1,1 offset and -2 to to dimensions so that we don't run on edge pixels.</text><text x="1097.5" y="3540.75">    queue_.enqueueNDRangeKernel(gaussian_, cl::NDRange(1, 1),</text><text x="1097.5" y="3554.75">                                cl::NDRange(input_.rows - 2, input_.cols - 2),</text><text x="1097.5" y="3568.75">                                cl::NDRange(workgroup_size_, workgroup_size_),</text><text x="1097.5" y="3582.75">                                NULL);</text><text x="1097.5" y="3596.75">  } catch (cl::Error e) {</text><text x="1097.5" y="3610.75">    cerr &lt;&lt; endl &lt;&lt; "Error: " &lt;&lt; e.what() &lt;&lt; " : " &lt;&lt; e.err() &lt;&lt; endl;</text><text x="1097.5" y="3624.75">  }</text><text x="1097.5" y="3638.75">    AdvanceBuff();</text><text x="1097.5" y="3652.75">}</text></g><path d="M 3602 3541.25 L 3725.63 3541.25" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3730.88 3541.25 L 3723.88 3544.75 L 3725.63 3541.25 L 3723.88 3537.75 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 3542px; margin-left: 3667px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">总结</div></div></div></foreignObject><text x="3667" y="3546" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">总结</text></switch></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2886-3158-712-777-0)" font-size="12px"><text x="2887.5" y="3170.5">#area/programming</text><text x="2887.5" y="3184.5">#que OpenclImageProcessor::Gaussian() 的解释, 这个是canny opencl 实现的一部分</text><text x="2887.5" y="3198.5">#ans</text><text x="2887.5" y="3240.5">```c++</text><text x="2887.5" y="3254.5">gaussian_.setArg(0, PrevBuff());</text><text x="2887.5" y="3268.5">gaussian_.setArg(1, NextBuff());</text><text x="2887.5" y="3282.5">gaussian_.setArg(2, input_.rows);</text><text x="2887.5" y="3296.5">gaussian_.setArg(3, input_.cols);</text><text x="2887.5" y="3310.5">```</text><text x="2887.5" y="3324.5">这个是为了给 `gaussian_` 设置参数。</text><text x="2887.5" y="3338.5">这是`gaussian_` 内核对象对应的函数的签名, `__global` 表明该变量是全局变量(opencl 运行时中).</text><text x="2887.5" y="3352.5">```c++</text><text x="2887.5" y="3366.5">__kernel void gaussian_kernel(__global uchar *data,</text><text x="2887.5" y="3380.5">                              __global uchar *out,</text><text x="2887.5" y="3394.5">                                       size_t rows,</text><text x="2887.5" y="3408.5">                                       size_t cols)</text><text x="2887.5" y="3422.5">```</text><text x="2887.5" y="3464.5">// queue_.enqueueNDRangeKernel 的函数原型是：</text><text x="2887.5" y="3478.5">    cl_int enqueueNDRangeKernel(</text><text x="2887.5" y="3492.5">        const Kernel&amp; kernel,</text><text x="2887.5" y="3506.5">        const NDRange&amp; offset,</text><text x="2887.5" y="3520.5">        const NDRange&amp; global,</text><text x="2887.5" y="3534.5">        const NDRange&amp; local = NullRange,</text><text x="2887.5" y="3548.5">        const VECTOR_CLASS&lt;Event&gt;* events = NULL,</text><text x="2887.5" y="3562.5">        Event* event = NULL) const</text><text x="2887.5" y="3590.5">其中，kernel 参数表示要执行的 NDRange 内核函数对象，offset 参数表示每个维度上的偏移量，默认为原点，</text><text x="2887.5" y="3604.5">global 参数表示每个维度上要处理的数据量，local 参数表示每个工作组中的工作项数量，默认为 NullRange，</text><text x="2887.5" y="3618.5">表示使用默认局部工作大小。events 和 event 参数用于指定事件对象，用于异步执行内核函数和等待内核函数执行完成。</text><text x="2887.5" y="3646.5">//  cl::NDRange(1, 1) 表示 offset , 表示从原数据的（1,1）位置开始</text><text x="2887.5" y="3660.5">//  cl::NDRange(input_.rows - 2, input_.cols - 2) 表示 global 的参数，表示要处理的全局数据量，通过offset 与 global 的参数</text><text x="2887.5" y="3674.5">// 可以得到 要处理数据的 index.</text><text x="2887.5" y="3688.5">//  表示工作组要处理的数据量，两个维度表示，workgroup_size_ 这里的值是 16</text><text x="2887.5" y="3730.5">// 1,1 offset and -2 to to dimensions so that we don't run on edge pixels.</text><text x="2887.5" y="3744.5">queue_.enqueueNDRangeKernel(gaussian_, cl::NDRange(1, 1),</text><text x="2887.5" y="3758.5">                            cl::NDRange(input_.rows - 2, input_.cols - 2),</text><text x="2887.5" y="3772.5">                            cl::NDRange(workgroup_size_, workgroup_size_),</text><text x="2887.5" y="3786.5">                            NULL);</text><text x="2887.5" y="3828.5">另外重要的：</text><text x="2887.5" y="3856.5">```c++</text><text x="2887.5" y="3870.5">AdvanceBuff();</text><text x="2887.5" y="3884.5">```</text><text x="2887.5" y="3898.5">这个表示队列执行完内核对象的任务，切换buff, 输入变输出，输出变输入，这个函数在对象私有方法中。切换的目的是为了下一个</text><text x="2887.5" y="3912.5">任务的输入其实是当前任务的输出，所以需要切换</text></g><g fill="#67de17" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1583-4113-365-130-0)" font-size="12px"><text x="1584.5" y="4125.5">先执行  Gaussian() 函数，这个是一个kernel  函数， 进行滤波。</text><text x="1584.5" y="4139.5">它会在gpu 中执行。</text><text x="1584.5" y="4153.5">然后 Sobel() 、NonMaxSuppression(); HysteresisThresholding();</text><text x="1584.5" y="4167.5">都是一样在gpu 中执行。这些函数在类中都是Public 方法。</text><text x="1584.5" y="4181.5">相关的函数解释看对应的函数。</text></g><path d="M 832 514.5 L 935.63 514.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 940.88 514.5 L 933.88 518 L 935.63 514.5 L 933.88 511 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 758.19 1213.8 L 758 785 L 758 535.87" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 758 530.62 L 761.5 537.62 L 758 535.87 L 754.5 537.62 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1109px; margin-left: 764px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">内核函数的实现</div></div></div></foreignObject><text x="764" y="1112" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">内核函数的实现</text></switch></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-706-505-122-30-0)" font-size="12px"><text x="707.5" y="517">内核函数源码</text></g><path d="M 1360 514.5 L 1885.63 514.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1890.88 514.5 L 1883.88 518 L 1885.63 514.5 L 1883.88 511 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 511px; margin-left: 1600px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">函数解释</div></div></div></foreignObject><text x="1600" y="514" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">函数解释</text></switch></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-946-20-410-999-0)" font-size="12px"><text x="947.5" y="60.5">__constant float gaus[3][3] = { {0.0625, 0.125, 0.0625},</text><text x="947.5" y="74.5">                                {0.1250, 0.250, 0.1250},</text><text x="947.5" y="88.5">                                {0.0625, 0.125, 0.0625} };</text><text x="947.5" y="116.5">#define L_SIZE 16</text><text x="947.5" y="144.5">// Gaussian Kernel</text><text x="947.5" y="158.5">// data: image input data with each pixel taking up 1 byte (8Bit 1Channel)</text><text x="947.5" y="172.5">// out: image output data (8B1C)</text><text x="947.5" y="186.5">__kernel void gaussian_kernel(__global uchar *data,</text><text x="947.5" y="200.5">                              __global uchar *out,</text><text x="947.5" y="214.5">                                       size_t rows,</text><text x="947.5" y="228.5">                                       size_t cols)</text><text x="947.5" y="242.5">{</text><text x="947.5" y="256.5">    int sum = 0;</text><text x="947.5" y="270.5">    size_t g_row = get_global_id(0);</text><text x="947.5" y="284.5">    size_t g_col = get_global_id(1);</text><text x="947.5" y="298.5">    size_t l_row = get_local_id(0) + 1;</text><text x="947.5" y="312.5">    size_t l_col = get_local_id(1) + 1;</text><text x="947.5" y="340.5">    size_t pos = g_row * cols + g_col;</text><text x="947.5" y="368.5">    __local int l_data[L_SIZE+2][L_SIZE+2];</text><text x="947.5" y="396.5">    // copy to local</text><text x="947.5" y="410.5">    l_data[l_row][l_col] = data[pos];</text><text x="947.5" y="438.5">    // top most row</text><text x="947.5" y="452.5">    if (l_row == 1)</text><text x="947.5" y="466.5">    {</text><text x="947.5" y="480.5">        l_data[0][l_col] = data[pos-cols];</text><text x="947.5" y="494.5">        // top left</text><text x="947.5" y="508.5">        if (l_col == 1)</text><text x="947.5" y="522.5">            l_data[0][0] = data[pos-cols-1];</text><text x="947.5" y="550.5">        // top right</text><text x="947.5" y="564.5">        else if (l_col == L_SIZE)</text><text x="947.5" y="578.5">            l_data[0][L_SIZE+1] = data[pos-cols+1];</text><text x="947.5" y="592.5">    }</text><text x="947.5" y="606.5">    // bottom most row</text><text x="947.5" y="620.5">    else if (l_row == L_SIZE)</text><text x="947.5" y="634.5">    {</text><text x="947.5" y="648.5">        l_data[L_SIZE+1][l_col] = data[pos+cols];</text><text x="947.5" y="662.5">        // bottom left</text><text x="947.5" y="676.5">        if (l_col == 1)</text><text x="947.5" y="690.5">            l_data[L_SIZE+1][0] = data[pos+cols-1];</text><text x="947.5" y="718.5">        // bottom right</text><text x="947.5" y="732.5">        else if (l_col == L_SIZE)</text><text x="947.5" y="746.5">            l_data[L_SIZE+1][L_SIZE+1] = data[pos+cols+1];</text><text x="947.5" y="760.5">    }</text><text x="947.5" y="788.5">    if (l_col == 1)</text><text x="947.5" y="802.5">        l_data[l_row][0] = data[pos-1];</text><text x="947.5" y="816.5">    else if (l_col == L_SIZE)</text><text x="947.5" y="830.5">        l_data[l_row][L_SIZE+1] = data[pos+1];</text><text x="947.5" y="858.5">    barrier(CLK_LOCAL_MEM_FENCE);</text><text x="947.5" y="886.5">    for (int i = 0; i &lt; 3; i++)</text><text x="947.5" y="900.5">        for (int j = 0; j &lt; 3; j++)</text><text x="947.5" y="914.5">            sum += gaus[i][j] * l_data[i+l_row-1][j+l_col-1];</text><text x="947.5" y="942.5">    out[pos] = min(255,max(0,sum));</text><text x="947.5" y="970.5">    return;</text><text x="947.5" y="984.5">}</text></g><path d="M 2822 514.5 L 3165.63 514.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 3170.88 514.5 L 3163.88 518 L 3165.63 514.5 L 3163.88 511 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 517px; margin-left: 2947px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">继续解释</div></div></div></foreignObject><text x="2947" y="520" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">继续解释</text></switch></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1896-5-922-1030-0)" font-size="12px"><text x="1897.5" y="17">- #area/programming</text><text x="1897.5" y="31">#que opencl 内核函数高斯模糊源码解释</text><text x="1897.5" y="45">    - #ans</text><text x="1897.5" y="73">```c++</text><text x="1897.5" y="87">__constant float gaus[3][3] = { {0.0625, 0.125, 0.0625},</text><text x="1897.5" y="101">                                {0.1250, 0.250, 0.1250},</text><text x="1897.5" y="115">                                {0.0625, 0.125, 0.0625} };</text><text x="1897.5" y="129">```</text><text x="1897.5" y="143">高斯卷积核</text><text x="1897.5" y="157">```c++</text><text x="1897.5" y="171">#define L_SIZE 16</text><text x="1897.5" y="185">```</text><text x="1897.5" y="199">每个工作组的工作项的边长，这里的工作项是：16*16</text><text x="1897.5" y="241">```c++</text><text x="1897.5" y="255">/ Gaussian Kernel</text><text x="1897.5" y="269">// data: image input data with each pixel taking up 1 byte (8Bit 1Channel)</text><text x="1897.5" y="283">// out: image output data (8B1C)</text><text x="1897.5" y="297">__kernel void gaussian_kernel(__global uchar *data,</text><text x="1897.5" y="311">                              __global uchar *out,</text><text x="1897.5" y="325">                                       size_t rows,</text><text x="1897.5" y="339">                                       size_t cols)</text><text x="1897.5" y="353">```</text><text x="1897.5" y="367">函数签名</text><text x="1897.5" y="409">```</text><text x="1897.5" y="423">{</text><text x="1897.5" y="437">    int sum = 0;</text><text x="1897.5" y="451">    // get current work global row in global data</text><text x="1897.5" y="465">    size_t g_row = get_global_id(0);</text><text x="1897.5" y="479">    // get current work global col in global data</text><text x="1897.5" y="493">    size_t g_col = get_global_id(1);</text><text x="1897.5" y="507">    // get </text><text x="1897.5" y="521">    size_t l_row = get_local_id(0) + 1;</text><text x="1897.5" y="535">    size_t l_col = get_local_id(1) + 1;</text><text x="1897.5" y="549">```</text><text x="1897.5" y="563">oepncl 这里把每个像素交給一个工作项处理，而每个工作项中可以调用函数获取当前工作项在全局数据中的位置。</text><text x="1897.5" y="577">`size_t g_row = get_global_id(0);` 获取当前工作在全局数据中的行, 0 代表第二个维度</text><text x="1897.5" y="591">`size_t g_col = get_global_id(1);` 获取当前工作在全局数据中的列, 1 代表第二个维度</text><text x="1897.5" y="619">```c++</text><text x="1897.5" y="633">// get the postion of current work in the global data</text><text x="1897.5" y="647">size_t pos = g_row * cols + g_col;</text><text x="1897.5" y="675">// the local array is created to store the data that is waiting for processing, it is shared among the current work group</text><text x="1897.5" y="689">__local int l_data[L_SIZE+2][L_SIZE+2];</text><text x="1897.5" y="703">```</text><text x="1897.5" y="717">获取当前工作项处理的数据在全局数据中的位置。</text><text x="1897.5" y="731">`l_data` 是当前工作组共享的数组 ， 是二维数组，边长是工作组的大小加2，加2 是为了考虑 padding ，因为处理工作组的边缘的工作项时，需要获取超出工作项范围数据。</text><text x="1897.5" y="759">```c++</text><text x="1897.5" y="773">// copy to local</text><text x="1897.5" y="787">// copy the global data to the local array data; the copied data belongs to the current work item. </text><text x="1897.5" y="801">l_data[l_row][l_col] = data[pos];</text><text x="1897.5" y="815">```</text><text x="1897.5" y="829">注意每个工作项都会将自身对应的数据拷贝到当前工作组的数组，除了需啊padding的那一圈数据，由于padding 的数据与位于边缘的工作项有关，可以由下面的程序处理。</text><text x="1897.5" y="899">完整程序见：</text><text x="1897.5" y="913">https://github.com/smskelley/canny-opencl/blob/master/src/kernels/gpu/gaussian_kernel.cl</text></g><path d="M 4312 1550 L 4645.63 1550" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 4650.88 1550 L 4643.88 1553.5 L 4645.63 1550 L 4643.88 1546.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1555px; margin-left: 4489px;"><div data-drawio-colors="color: #000000; background-color: #E3E3E3; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(227, 227, 227); white-space: nowrap;">main  loop </div></div></div></foreignObject><text x="4489" y="1558" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">ma...</text></switch></g><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-3986-1523-322-65-0)" font-size="39px"><rect fill="#E3E3E3" stroke="none" x="3987" y="1525" width="214" height="48" stroke-width="0"/><text x="3987.5" y="1562">main 主程序</text></g><path d="M 5122 1550 L 5242 1550 L 5275.63 1550" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 5280.88 1550 L 5273.88 1553.5 L 5275.63 1550 L 5273.88 1546.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1552px; margin-left: 5187px;"><div data-drawio-colors="color: #000000; background-color: #E3E3E3; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(227, 227, 227); white-space: nowrap;">流程解释</div></div></div></foreignObject><text x="5187" y="1555" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">流程解释</text></switch></g><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-4656-1200-462-710-0)" font-size="12px"><rect fill="#E3E3E3" stroke="none" x="4657" y="1203" width="418" height="706" stroke-width="0"/><text x="4657.5" y="1212.5">// This application runs the desired canny algorithm on webcam data,</text><text x="4657.5" y="1226.5">// displaying it back to the user in near real time.</text><text x="4657.5" y="1240.5">#include &lt;iostream&gt;</text><text x="4657.5" y="1254.5">#include &lt;opencv2/highgui/highgui.hpp&gt;</text><text x="4657.5" y="1268.5">#include "autotimer.h"</text><text x="4657.5" y="1282.5">#include "imageprocessor.h"</text><text x="4657.5" y="1296.5">#include "openclimageprocessor.h"</text><text x="4657.5" y="1310.5">#include "serialimageprocessor.h"</text><text x="4657.5" y="1324.5">using namespace std;</text><text x="4657.5" y="1338.5">using namespace ImageProcessors;</text><text x="4657.5" y="1352.5">using Benchmarking::AutoTimer;</text><text x="4657.5" y="1366.5">// Called when timer finishes, output the amount of time it took.</text><text x="4657.5" y="1380.5">void onTimerFinish(double time) {</text><text x="4657.5" y="1394.5">  cout &lt;&lt; "Took " &lt;&lt; time &lt;&lt; " milliseconds.\n";</text><text x="4657.5" y="1408.5">}</text><text x="4657.5" y="1422.5">int main(int argc, char *argv[]) {</text><text x="4657.5" y="1436.5">  cv::VideoCapture webcam(0);</text><text x="4657.5" y="1450.5">  cv::Mat in_frame, gray_frame;</text><text x="4657.5" y="1464.5">  bool use_gpu = true;</text><text x="4657.5" y="1478.5">  bool use_parallel = true;</text><text x="4657.5" y="1492.5">  unique_ptr&lt;ImageProcessor&gt; processor(nullptr);</text><text x="4657.5" y="1506.5">  // parse command line arguments</text><text x="4657.5" y="1520.5">  for (int i = 1; i &lt; argc; i++) {</text><text x="4657.5" y="1534.5">    if (strcmp(argv[i], "cpu") == 0)</text><text x="4657.5" y="1548.5">      use_gpu = false;</text><text x="4657.5" y="1562.5">    else if (strcmp(argv[i], "serial") == 0)</text><text x="4657.5" y="1576.5">      use_parallel = false;</text><text x="4657.5" y="1590.5">  }</text><text x="4657.5" y="1604.5">  // Create and load the appropriate image processor</text><text x="4657.5" y="1618.5">  if (use_parallel)</text><text x="4657.5" y="1632.5">    processor.reset(new OpenclImageProcessor(use_gpu));</text><text x="4657.5" y="1646.5">  else</text><text x="4657.5" y="1660.5">    processor.reset(new SerialImageProcessor());</text><text x="4657.5" y="1674.5">  // grab new frame, convert to grayscale, detect edges, then display the result.</text><text x="4657.5" y="1688.5">  while (true) {</text><text x="4657.5" y="1702.5">    webcam.read(in_frame);</text><text x="4657.5" y="1716.5">    cv::cvtColor(in_frame, gray_frame, cv::COLOR_BGR2GRAY);</text><text x="4657.5" y="1730.5">    processor-&gt;LoadImage(gray_frame);</text><text x="4657.5" y="1744.5">    processor-&gt;FinishJobs();</text><text x="4657.5" y="1758.5">    {</text><text x="4657.5" y="1772.5">      AutoTimer timer(onTimerFinish);</text><text x="4657.5" y="1786.5">      processor-&gt;Canny();</text><text x="4657.5" y="1800.5">      processor-&gt;FinishJobs();</text><text x="4657.5" y="1814.5">    }</text><text x="4657.5" y="1828.5">    imshow("canny", processor-&gt;output());</text><text x="4657.5" y="1842.5">    if (cv::waitKey(30) &gt;= 0) break;</text><text x="4657.5" y="1856.5">  }</text><text x="4657.5" y="1870.5">  return 0;</text><text x="4657.5" y="1884.5">}</text></g><g fill="#000000" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-5286-1130-832-870-0)" font-size="12px"><rect fill="#E3E3E3" stroke="none" x="5287" y="1133" width="816" height="865" stroke-width="0"/><text x="5287.5" y="1142.5">#que canny algorithm implementing by opencl 主函数流程</text><text x="5287.5" y="1156.5">#ans</text><text x="5287.5" y="1170.5">github 地址：https://github.com/smskelley/canny-opencl/</text><text x="5287.5" y="1198.5">主要的程序：</text><text x="5287.5" y="1212.5">https://github.com/smskelley/canny-opencl/blob/master/src/live-capture/live-capture.cpp</text><text x="5287.5" y="1254.5">在下面程序有个关键：new OpenclImageProcessor(use_gpu)  ，OpenclImageProcessor 是这个程序的主要的类</text><text x="5287.5" y="1268.5">```c++</text><text x="5287.5" y="1296.5">// Create and load the appropriate image processor</text><text x="5287.5" y="1310.5">if (use_parallel)</text><text x="5287.5" y="1324.5">  // create OpenclImageProcessor object </text><text x="5287.5" y="1338.5">  processor.reset(new OpenclImageProcessor(use_gpu));</text><text x="5287.5" y="1352.5">else</text><text x="5287.5" y="1366.5">  processor.reset(new SerialImageProcessor());</text><text x="5287.5" y="1394.5">// grab new frame, convert to grayscale, detect edges, then display the result.</text><text x="5287.5" y="1408.5">while (true) {</text><text x="5287.5" y="1422.5">  // read a image form camera</text><text x="5287.5" y="1436.5">  webcam.read(in_frame);</text><text x="5287.5" y="1450.5">  cv::cvtColor(in_frame, gray_frame, cv::COLOR_BGR2GRAY);</text><text x="5287.5" y="1464.5">  // loder image , create buffers </text><text x="5287.5" y="1478.5">  processor-&gt;LoadImage(gray_frame);</text><text x="5287.5" y="1506.5">  processor-&gt;FinishJobs();</text><text x="5287.5" y="1520.5">  {</text><text x="5287.5" y="1534.5">    AutoTimer timer(onTimerFinish);</text><text x="5287.5" y="1548.5">    // run canny algorithm in CPU or GPU</text><text x="5287.5" y="1562.5">    processor-&gt;Canny();</text><text x="5287.5" y="1576.5">    // Block until all jobs finish</text><text x="5287.5" y="1590.5">    processor-&gt;FinishJobs();</text><text x="5287.5" y="1604.5">  }</text><text x="5287.5" y="1632.5">  imshow("canny", processor-&gt;output());</text><text x="5287.5" y="1646.5">  if (cv::waitKey(30) &gt;= 0) break;</text><text x="5287.5" y="1660.5">}</text><text x="5287.5" y="1674.5">```</text><text x="5287.5" y="1716.5">#que c++ AutoTimer 类型的对象 计时</text><text x="5287.5" y="1730.5">    - #ans</text><text x="5287.5" y="1758.5">```c++</text><text x="5287.5" y="1772.5">// Called when timer finishes, output the amount of time it took.</text><text x="5287.5" y="1786.5">void onTimerFinish(double time) {</text><text x="5287.5" y="1800.5">  cout &lt;&lt; "Took " &lt;&lt; time &lt;&lt; " milliseconds.\n";</text><text x="5287.5" y="1814.5">}</text><text x="5287.5" y="1828.5">{</text><text x="5287.5" y="1842.5"> AutoTimer timer(onTimerFinish);</text><text x="5287.5" y="1856.5"> processor-&gt;Canny();</text><text x="5287.5" y="1870.5"> processor-&gt;FinishJobs();</text><text x="5287.5" y="1884.5">}</text><text x="5287.5" y="1898.5">```</text><text x="5287.5" y="1912.5">这段代码似乎定义了一个函数 onTimerFinish，它接受一个 double 类型的参数 time，并使用 cout 输出一个包含毫秒时间的消息到控制台。</text><text x="5287.5" y="1940.5">代码还创建了一个 AutoTimer 类型的对象，并将 onTimerFinish 作为参数传递给它的构造函数。AutoTimer 对象可能在构造时启动计时器，</text><text x="5287.5" y="1954.5">并在被销毁时停止计时器（例如，当它超出作用域时）。接着在 AutoTimer 对象的作用域内调用了 processor-&gt;Canny() 和 processor-&gt;FinishJobs() 函数。</text><text x="5287.5" y="1968.5">这可能意味着计时器正在测量这些函数执行所需的时间。</text></g><path d="M 802 3864 L 985.63 3864" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 990.88 3864 L 983.88 3867.5 L 985.63 3864 L 983.88 3860.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-696-3850-102-38-0)" font-size="12px"><text x="697.5" y="3862.5">cv::Mat output();</text></g><path d="M 429.57 1650.78 L 561 1651 L 561 3864 L 685.63 3864" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 690.88 3864 L 683.88 3867.5 L 685.63 3864 L 683.88 3860.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1660px; margin-left: 495px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; background-color: rgb(255, 255, 255); white-space: nowrap;">output() </div></div></div></foreignObject><text x="495" y="1663" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">ou...</text></switch></g><path d="M 1162 3864 L 1420.63 3864" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1425.88 3864 L 1418.88 3867.5 L 1420.63 3864 L 1418.88 3860.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-996-3850-162-38-0)" font-size="12px"><text x="997.5" y="3862.5">cv::Mat output()  函数实现</text></g><path d="M 1927 3864 L 1947 3864 L 1932 3864 L 1945.63 3864" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><path d="M 1950.88 3864 L 1943.88 3867.5 L 1945.63 3864 L 1943.88 3860.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="none"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1431-3789-492-160-0)" font-size="12px"><text x="1432.5" y="3801.5">// copies the buffer back from the device and returns it. This will block.</text><text x="1432.5" y="3815.5">cv::Mat OpenclImageProcessor::output() {</text><text x="1432.5" y="3829.5">  // copy the buffer back</text><text x="1432.5" y="3843.5">  queue_.enqueueReadBuffer(PrevBuff(), CL_TRUE, 0,</text><text x="1432.5" y="3857.5">                          input_.rows * input_.cols * input_.elemSize(),</text><text x="1432.5" y="3871.5">                          output_.data);</text><text x="1432.5" y="3885.5">  queue_.finish();</text><text x="1432.5" y="3899.5">  assert(output_.rows == input_.rows &amp;&amp; output_.cols == input_.cols);</text><text x="1432.5" y="3913.5">  return output_;</text><text x="1432.5" y="3927.5">}</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-1956-3789-492-160-0)" font-size="12px"><text x="1957.5" y="3801.5">output_ 是类在LoadImage 函数 中 定义的Mat 类型的对象</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-3176-100-662-840-0)" font-size="12px"><text x="3177.5" y="112">接下来这段程序就是处理，边缘工作项的情况，把当前工作项旁边的数据从global 数据区拷贝过来。</text><text x="3177.5" y="126">如图所示：</text><text x="3177.5" y="140">![](https://qyzhizi.cn/img/202307061913051.png)</text><text x="3177.5" y="154">```c++</text><text x="3177.5" y="168">// top most row</text><text x="3177.5" y="182">if (l_row == 1)</text><text x="3177.5" y="196">{</text><text x="3177.5" y="210">l_data[0][l_col] = data[pos-cols];</text><text x="3177.5" y="224">// top left</text><text x="3177.5" y="238">if (l_col == 1)</text><text x="3177.5" y="252">l_data[0][0] = data[pos-cols-1];</text><text x="3177.5" y="280">// top right</text><text x="3177.5" y="294">else if (l_col == L_SIZE)</text><text x="3177.5" y="308">l_data[0][L_SIZE+1] = data[pos-cols+1];</text><text x="3177.5" y="322">}</text><text x="3177.5" y="336">// bottom most row</text><text x="3177.5" y="350">else if (l_row == L_SIZE)</text><text x="3177.5" y="364">{</text><text x="3177.5" y="378">l_data[L_SIZE+1][l_col] = data[pos+cols];</text><text x="3177.5" y="392">// bottom left</text><text x="3177.5" y="406">if (l_col == 1)</text><text x="3177.5" y="420">l_data[L_SIZE+1][0] = data[pos+cols-1];</text><text x="3177.5" y="448">// bottom right</text><text x="3177.5" y="462">else if (l_col == L_SIZE)</text><text x="3177.5" y="476">l_data[L_SIZE+1][L_SIZE+1] = data[pos+cols+1];</text><text x="3177.5" y="490">}</text><text x="3177.5" y="518">if (l_col == 1)</text><text x="3177.5" y="532">l_data[l_row][0] = data[pos-1];</text><text x="3177.5" y="546">else if (l_col == L_SIZE)</text><text x="3177.5" y="560">l_data[l_row][L_SIZE+1] = data[pos+1];</text><text x="3177.5" y="574">```</text><text x="3177.5" y="602">```c++</text><text x="3177.5" y="616">// wait until all above work items have already finished.</text><text x="3177.5" y="630">barrier(CLK_LOCAL_MEM_FENCE);</text><text x="3177.5" y="644">```</text><text x="3177.5" y="658">这是为了等待所有工作项都完成上面的工作，这是为保证，后续工作项运算时，确保旁边8个位置的数据已经就绪了。</text><text x="3177.5" y="714">以下程序是正式利用高斯算子，进行高斯模糊化计算。</text><text x="3177.5" y="728">![](https://qyzhizi.cn/img/202307061930917.png)</text><text x="3177.5" y="742">```c++</text><text x="3177.5" y="756">// gaus calculation</text><text x="3177.5" y="770">for (int i = 0; i &lt; 3; i++)</text><text x="3177.5" y="784">for (int j = 0; j &lt; 3; j++)</text><text x="3177.5" y="798">sum += gaus[i][j] * l_data[i+l_row-1][j+l_col-1];</text><text x="3177.5" y="826">out[pos] = min(255,max(0,sum));</text><text x="3177.5" y="854">return;</text><text x="3177.5" y="868">```</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2676-2190-415-72-0)" font-size="12px"><rect fill="none" stroke="#1127F0" x="2677" y="2193" width="333" height="59" stroke-width="1"/><text x="2677.5" y="2202.5">总结：</text><text x="2677.5" y="2216.5">- 获取设备信息</text><text x="2677.5" y="2230.5">- 使用设备信息，创建命令队列，用于提交内核对象到设备执行</text><text x="2677.5" y="2244.5">- 生成内核对象（高斯滤波、sobel、极大值抑制、滞后阈值）</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-2976-2720-647-160-0)" font-size="12px"><text x="2977.5" y="2732.5">总结：</text><text x="2977.5" y="2746.5">- 裁剪图片，保证图片可以划分为工作组的整数倍</text><text x="2977.5" y="2760.5">- 将裁剪后的图片拷贝一份，保存到input_， 这样可以保证工作组索引不会引用错误的像素。</text><text x="2977.5" y="2774.5">- 创建两个缓存，该缓存的生命周期由opencl 的运行时管理，不用担心内存回收的问题</text><text x="2977.5" y="2788.5">- 这两个缓存是个循环缓存，分别代表kernel 对象的输入与输出，后续还有几个kernel 对象需要执行，它们是串</text><text x="2977.5" y="2802.5">连的，将这个两个缓存的的名称转换，原来的输出变为输入，原来的输入将保存当前 kernel 的输出。最开始的输入就是</text><text x="2977.5" y="2816.5">原始裁剪后的图片。</text><text x="2977.5" y="2830.5">- 这里两个缓存是沟通主机内存与设备显存的桥梁，它们有opencl 运行时实现，缓存可以实现在主机申请内存，</text><text x="2977.5" y="2844.5">但设备需要数据时，自动把数据传输到设备。同样可以把设备的线显存的数据输出到主机内存。</text></g><g fill="rgb(0, 0, 0)" font-family="Helvetica" pointer-events="none" clip-path="url(#mx-clip-3736-3158-712-777-0)" font-size="12px"><text x="3737.5" y="3170.5">步骤：</text><text x="3737.5" y="3184.5">-1 </text></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.drawio.com/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>