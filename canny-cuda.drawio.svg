<?xml version="1.0" encoding="UTF-8"?>
<!-- Do not edit this file with editors other than draw.io -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="5622px" height="3382px" viewBox="-0.5 -0.5 5622 3382" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2023-07-13T22:08:51.764Z&quot; agent=&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&quot; etag=&quot;qZWcPly6YNP_wlS8s0Az&quot; version=&quot;21.6.2&quot; type=&quot;github&quot;&gt;&lt;diagram id=&quot;C5RBs43oDa-KdzZeNtuy&quot; name=&quot;Page-1&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;"><defs><style type="text/css">@media (prefers-color-scheme: dark) {svg { filter: invert(93%) hue-rotate(180deg); }&#xa;image { filter: invert(100%) hue-rotate(180deg) saturate(1.25) }&#xa;	svg[style^="background-color: rgb(255, 255, 255);"] {		background-color: #121212 !important;	}}</style></defs><g><path d="M 370 60 L 370 93.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 370 98.88 L 366.5 91.88 L 370 93.63 L 373.5 91.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 430 40 L 503.63 40" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 508.88 40 L 501.88 43.5 L 503.63 40 L 501.88 36.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 44px; margin-left: 473px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;">代码地址</div></div></div></foreignObject><text x="473" y="47" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">代码地址</text></switch></g><rect x="310" y="20" width="120" height="40" rx="6" ry="6" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 40px; margin-left: 311px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><font style="font-size: 18px;" color="#ff33ff">开始</font></div></div></div></foreignObject><text x="370" y="44" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">开始</text></switch></g><path d="M 370 150 L 370 183.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 370 188.88 L 366.5 181.88 L 370 183.63 L 373.5 181.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="195" y="100" width="350" height="50" rx="7.5" ry="7.5" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 348px; height: 1px; padding-top: 125px; margin-left: 196px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;">int <span style="color: #dcdcaa;">main</span>(<span style="color: #569cd6;">int</span> <span style="color: #9cdcfe;">argc</span>, <span style="color: #569cd6;">char**</span> <span style="color: #9cdcfe;">argv</span>)</div></div></div></div></foreignObject><text x="370" y="129" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">int main(int argc, char** argv)</text></switch></g><path d="M 370 320 L 370 363.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 370 368.88 L 366.5 361.88 L 370 363.63 L 373.5 361.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 645 255 L 703.63 255" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 708.88 255 L 701.88 258.5 L 703.63 255 L 701.88 251.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="95" y="190" width="550" height="130" rx="19.5" ry="19.5" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 548px; height: 1px; padding-top: 255px; margin-left: 97px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;"><div style="line-height: 23px;"><div>    /* storage and defaults for command line arguments */</div><div>    <span style="white-space: pre;">	</span><span style="color: #569cd6;">struct</span> <span style="color: #4ec9b0;">arguments</span> <span style="color: #9cdcfe;">args</span>;</div><div>        <span style="color: #9cdcfe;">args</span>.<span style="color: #9cdcfe;">inFile</span> <span style="color: #dcdcaa;">=</span> <span style="color: #569cd6;">DEFAULT_INFILE</span>;</div><div>        <span style="color: #9cdcfe;">args</span>.<span style="color: #9cdcfe;">outFile</span> <span style="color: #dcdcaa;">=</span> <span style="color: #569cd6;">DEFAULT_OUTFILE</span>; </div><div><span style="color: #9cdcfe;"><span style="white-space: pre;">	</span>args</span>.<span style="color: #9cdcfe;">serial</span> = <span style="color: #569cd6;">false</span>;</div></div></div></div></div></div></foreignObject><text x="97" y="259" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">/* storage and defaults for command line arguments */...</text></switch></g><path d="M 740 450 L 783.63 450" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 788.88 450 L 781.88 453.5 L 783.63 450 L 781.88 446.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 370 530 L 370 563.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 370 568.88 L 366.5 561.88 L 370 563.63 L 373.5 561.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="0" y="370" width="740" height="160" rx="24" ry="24" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 738px; height: 1px; padding-top: 450px; margin-left: 2px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div>    /* parse cmd line args */</div><div>    <span style="color: #569cd6;">int</span> <span style="color: #9cdcfe;">rc</span> = <span style="color: #dcdcaa;">argp_parse</span>(&amp;<span style="color: #9cdcfe;">argp</span>, <span style="color: #9cdcfe;">argc</span>, <span style="color: #9cdcfe;">argv</span>, <span style="color: #b5cea8;">0</span>, <span style="color: #b5cea8;">0</span>, &amp;<span style="color: #9cdcfe;">args</span>);</div><div>    <span style="color: #c586c0;">if</span> (<span style="color: #9cdcfe;">rc</span>) {</div><div>        <span style="color: #4ec9b0;">std</span>::<span style="color: #9cdcfe;">cerr</span> <span style="color: #dcdcaa;">&lt;&lt;</span> <span style="color: #ce9178;">"Failed to parse command line arguments."</span> <span style="color: #dcdcaa;">&lt;&lt;</span> <span style="color: #4ec9b0;">std</span>::<span style="color: #dcdcaa;">endl</span>;</div><div>        <span style="color: #dcdcaa;">exit</span>(<span style="color: #9cdcfe;">rc</span>);</div><div>    }</div></div></div></div></div></div></div></foreignObject><text x="2" y="454" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">/* parse cmd line args */...</text></switch></g><path d="M 710 205 L 910 205 L 940 235 L 940 305 L 710 305 L 710 205 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 910 205 L 910 235 L 940 235 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 910 205 L 910 235 L 940 235" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 228px; height: 1px; padding-top: 255px; margin-left: 711px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">用于储存默认命令行参数<br /></div></div></div></foreignObject><text x="825" y="259" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">用于储存默认命令行参数&#xa;</text></switch></g><path d="M 790 400 L 990 400 L 1020 430 L 1020 500 L 790 500 L 790 400 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 990 400 L 990 430 L 1020 430 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 990 400 L 990 430 L 1020 430" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 228px; height: 1px; padding-top: 450px; margin-left: 791px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">传给 argp_parse 函数, argp 是一个自定义的结构体，在 ed_args.h 定义。<br /> 解析命令行参数，保存到args</div></div></div></foreignObject><text x="905" y="454" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">传给 argp_parse 函数, argp 是一个自定义的结构体，在 ed_args.h 定义。...</text></switch></g><path d="M 685 595 L 770.63 595" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 775.88 595 L 768.88 598.5 L 770.63 595 L 768.88 591.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 370 620 L 370 998.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 370 1003.88 L 366.5 996.88 L 370 998.63 L 373.5 996.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="55" y="570" width="630" height="50" rx="7.5" ry="7.5" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 628px; height: 1px; padding-top: 595px; margin-left: 57px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;">std::<span style="color: #4ec9b0;">shared_ptr</span>&lt;<span style="color: #4ec9b0;">ImgMgr</span>&gt; <span style="color: #9cdcfe;">img_mgr</span> = <span style="color: #4ec9b0;">std</span>::<span style="color: #dcdcaa;">make_shared</span>&lt;<span style="color: #4ec9b0;">ImgMgr</span>&gt;(*<span style="color: #9cdcfe;">argv</span>);</div></div></div></div></div></div></div></foreignObject><text x="57" y="599" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">std::shared_ptr&lt;ImgMgr&gt; img_mgr = std::make_shared&lt;ImgMgr&gt;(*argv);</text></switch></g><path d="M 1007 595 L 1080.63 595" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1085.88 595 L 1078.88 598.5 L 1080.63 595 L 1078.88 591.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 777 545 L 977 545 L 1007 575 L 1007 645 L 777 645 L 777 545 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 977 545 L 977 575 L 1007 575 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 977 545 L 977 575 L 1007 575" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 228px; height: 1px; padding-top: 595px; margin-left: 779px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">img_mgr  是共享指针<br />指向 ImgMgr 对象，将 *argv  （程序名）传给 ImgMgr 构造函数。</div></div></div></foreignObject><text x="779" y="599" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">img_mgr  是共享指针...</text></switch></g><path d="M 552.5 1030 L 770.63 1030" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 775.88 1030 L 768.88 1033.5 L 770.63 1030 L 768.88 1026.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 370 1055 L 370 1467.5 L 371.48 1873.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 371.5 1878.88 L 367.97 1871.89 L 371.48 1873.63 L 374.97 1871.87 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="187.5" y="1005" width="365" height="50" rx="7.5" ry="7.5" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 363px; height: 1px; padding-top: 1030px; margin-left: 190px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div>    /* read input file */</div><div>    <span style="color: #9cdcfe;">img_mgr</span><span style="color: #dcdcaa;">-&gt;</span><span style="color: #dcdcaa;">read_image</span>(<span style="color: #9cdcfe;">args</span>.<span style="color: #9cdcfe;">inFile</span>);</div></div></div></div></div></div></div></div></div></foreignObject><text x="190" y="1034" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">/* read input file */...</text></switch></g><path d="M 1007 1045 L 1540 1045 L 1684.63 1045" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1689.88 1045 L 1682.88 1048.5 L 1684.63 1045 L 1682.88 1041.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 777 980 L 977 980 L 1007 1010 L 1007 1080 L 777 1080 L 777 980 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 977 980 L 977 1010 L 1007 1010 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 977 980 L 977 1010 L 1007 1010" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 228px; height: 1px; padding-top: 1030px; margin-left: 779px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">使用Magick 库<br />读取图片，将RGB信息保存到 自定的结构体 m_pixels</div></div></div></foreignObject><text x="779" y="1034" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">使用Magick 库...</text></switch></g><path d="M 1087 282.5 L 1630 282.5 L 1660 312.5 L 1660 907.5 L 1087 907.5 L 1087 282.5 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 1630 282.5 L 1630 312.5 L 1660 312.5 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 1630 282.5 L 1630 312.5 L 1660 312.5" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 571px; height: 1px; padding-top: 595px; margin-left: 1089px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;"><div>class <span style="color: #4ec9b0;">ImgMgr</span></div><div>{</div><div>    <span style="color: #569cd6;">public:</span></div><div>        <span style="color: #dcdcaa;">ImgMgr</span>(<span style="color: #569cd6;">char</span> <span style="color: #569cd6;">*</span><span style="color: #9cdcfe;">argv</span>);</div><div>        <span style="color: #dcdcaa;">~ImgMgr</span>();</div><br /><div>        <span style="color: #569cd6;">unsigned</span> <span style="color: #dcdcaa;">getImgWidth</span>();</div><div>        <span style="color: #569cd6;">unsigned</span> <span style="color: #dcdcaa;">getImgHeight</span>();</div><div>        <span style="color: #569cd6;">unsigned</span> <span style="color: #dcdcaa;">getChannelDepth</span>();</div><div>        <span style="color: #569cd6;">unsigned</span> <span style="color: #dcdcaa;">getPixelCount</span>();</div><div>        <span style="color: #4ec9b0;">pixel_t</span><span style="color: #569cd6;">*</span> <span style="color: #dcdcaa;">getPixelHandle</span>();</div><br /><div>        <span style="color: #569cd6;">void</span> <span style="color: #dcdcaa;">read_image</span>(<span style="color: #569cd6;">const</span> <span style="color: #4ec9b0;">std</span>::<span style="color: #4ec9b0;">string</span> <span style="color: #569cd6;">&amp;</span><span style="color: #9cdcfe;">in_filename</span>);</div><div>        <span style="color: #569cd6;">void</span> <span style="color: #dcdcaa;">write_image</span>(<span style="color: #569cd6;">const</span> <span style="color: #4ec9b0;">std</span>::<span style="color: #4ec9b0;">string</span> <span style="color: #569cd6;">&amp;</span><span style="color: #9cdcfe;">out_filename</span>);</div><br /><div>        <span style="color: #569cd6;">void</span> <span style="color: #dcdcaa;">test_red_dot</span>(<span style="color: #569cd6;">const</span> <span style="color: #4ec9b0;">std</span>::<span style="color: #4ec9b0;">string</span> <span style="color: #569cd6;">&amp;</span><span style="color: #9cdcfe;">out_filename</span>);</div><br /><div>    <span style="color: #569cd6;">private:</span></div><div>        <span style="color: #569cd6;">int</span> <span style="color: #9cdcfe;">m_img_width</span>;</div><div>        <span style="color: #569cd6;">int</span> <span style="color: #9cdcfe;">m_img_height</span>;</div><div>        <span style="color: #569cd6;">int</span> <span style="color: #9cdcfe;">m_channel_depth</span>;</div><div>        <span style="color: #4ec9b0;">pixel_t</span> *<span style="color: #9cdcfe;">m_pixels</span>;</div><div>};</div><br /><div><span style="color: #c586c0;">#endif</span><span style="color: #6a9955;"> // _IMG_MGR_HPP_</span></div></div></div></div></div></foreignObject><text x="1089" y="599" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">class ImgMgr...</text></switch></g><path d="M 2580 660 L 2823.63 660" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2828.88 660 L 2821.88 663.5 L 2823.63 660 L 2821.88 656.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 1691 0 L 2550 0 L 2580 30 L 2580 1320 L 1691 1320 L 1691 0 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 2550 0 L 2550 30 L 2580 30 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 2550 0 L 2550 30 L 2580 30" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 887px; height: 1px; padding-top: 660px; margin-left: 1693px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;"><div style="line-height: 23px;"><div>void <span style="color: #4ec9b0;">ImgMgr</span>::<span style="color: #dcdcaa;">read_image</span>(<span style="color: #569cd6;">const</span> <span style="color: #4ec9b0;">std</span>::<span style="color: #4ec9b0;">string</span> <span style="color: #569cd6;">&amp;</span><span style="color: #9cdcfe;">in_filename</span>)</div><div>{</div><div>    <span style="color: #c586c0;">try</span> {</div><div>        <span style="color: #4ec9b0;">Magick</span>::Image img;</div><div>        <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">read</span>(<span style="color: #9cdcfe;">in_filename</span>);</div><br /><div><span style="color: #6a9955;">        // 判断是否存在透明度通道</span></div><div>        <span style="color: #c586c0;">if</span> (<span style="color: #9cdcfe;">image</span>.<span style="color: #dcdcaa;">alpha</span>()) {</div><div>            <span style="color: #4ec9b0;">std</span>::<span style="color: #9cdcfe;">cout</span> <span style="color: #dcdcaa;">&lt;&lt;</span> <span style="color: #ce9178;">"Image has alpha channel."</span> <span style="color: #dcdcaa;">&lt;&lt;</span> <span style="color: #4ec9b0;">std</span>::<span style="color: #dcdcaa;">endl</span>;</div><div>        }</div><br /><br /><div><span style="color: #6a9955;">        /* populate internal data structures */</span></div><div>        <span style="color: #9cdcfe;">m_img_width</span> = <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">columns</span>();</div><div>        <span style="color: #9cdcfe;">m_img_height</span> = <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">rows</span>();</div><div>        <span style="color: #9cdcfe;">m_channel_depth</span> = <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">depth</span>();</div><div><span style="color: #6a9955;">        // define the number of channels in the image</span></div><div>        <span style="color: #569cd6;">int</span> <span style="color: #9cdcfe;">channels</span> = <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">channels</span>();</div><div>        </div><div>        <span style="color: #c586c0;">if</span> (<span style="color: #569cd6;">nullptr</span> == <span style="color: #9cdcfe;">m_pixels</span>) {</div><div>            <span style="color: #9cdcfe;">m_pixels</span> = <span style="color: #c586c0;">new</span> <span style="color: #4ec9b0;">pixel_t</span>[<span style="color: #dcdcaa;">getPixelCount</span>()];<span style="color: #6a9955;"> // free'd in destructor</span></div><div>        } <span style="color: #c586c0;">else</span> {</div><div>            <span style="color: #c586c0;">delete</span><span style="color: #c586c0;"> </span><span style="color: #c586c0;">[]</span> <span style="color: #9cdcfe;">m_pixels</span>;</div><div>            <span style="color: #9cdcfe;">m_pixels</span> = <span style="color: #c586c0;">new</span> <span style="color: #4ec9b0;">pixel_t</span>[<span style="color: #dcdcaa;">getPixelCount</span>()];<span style="color: #6a9955;"> // free'd in destructor</span></div><div>        }</div><div>        <span style="color: #569cd6;">assert</span>(<span style="color: #569cd6;">nullptr</span> != <span style="color: #9cdcfe;">m_pixels</span>);</div><br /><div>        <span style="color: #c586c0;">#ifdef</span><span style="color: #569cd6;"> DEBUG</span></div><div>        <span style="color: #4ec9b0;">std</span>::cout &lt;&lt; <span style="color: #ce9178;">"Image: "</span> &lt;&lt; in_filename &lt;&lt; <span style="color: #4ec9b0;">std</span>::endl;</div><div>        <span style="color: #4ec9b0;">std</span>::cout &lt;&lt; <span style="color: #ce9178;">"Resolution: "</span> &lt;&lt; m_img_width &lt;&lt; <span style="color: #ce9178;">"x"</span> &lt;&lt; m_img_height &lt;&lt; <span style="color: #4ec9b0;">std</span>::endl;</div><div>        <span style="color: #4ec9b0;">std</span>::cout &lt;&lt; <span style="color: #ce9178;">"Pixel channels: "</span> &lt;&lt; <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">channels</span>() &lt;&lt; <span style="color: #4ec9b0;">std</span>::endl;</div><div>        <span style="color: #4ec9b0;">std</span>::cout &lt;&lt; <span style="color: #ce9178;">"Channel depth: "</span> &lt;&lt; m_channel_depth &lt;&lt; <span style="color: #4ec9b0;">std</span>::endl;</div><div><span style="color: #c586c0;">        #endif</span></div><br /><div><span style="color: #6a9955;">        /* extract the pixels from the image, put them in a format we can export portably */</span></div><div>        <span style="color: #569cd6;">const</span> <span style="color: #9cdcfe;">Magick</span>::Quantum *pixels = <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">getConstPixels</span>(<span style="color: #b5cea8;">0</span>, <span style="color: #b5cea8;">0</span>, <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">columns</span>(), <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">rows</span>());</div><div>        <span style="color: #c586c0;">for</span> (<span style="color: #569cd6;">unsigned</span> <span style="color: #9cdcfe;">i</span> = <span style="color: #b5cea8;">0</span>; <span style="color: #9cdcfe;">i</span> &lt; <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">rows</span>(); <span style="color: #9cdcfe;">i</span>++) {</div><div>            <span style="color: #c586c0;">for</span> (<span style="color: #569cd6;">unsigned</span> <span style="color: #9cdcfe;">j</span> = <span style="color: #b5cea8;">0</span>; <span style="color: #9cdcfe;">j</span> &lt; <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">columns</span>(); <span style="color: #9cdcfe;">j</span>++) {</div><div><span style="color: #6a9955;">                /* remap to a flat buffer of pixel structs */</span></div><div>                <span style="color: #569cd6;">unsigned</span> <span style="color: #9cdcfe;">idx</span> = <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">columns</span>() * <span style="color: #9cdcfe;">i</span> + <span style="color: #9cdcfe;">j</span>; </div><div>                <span style="color: #9cdcfe;">m_pixels</span>[<span style="color: #9cdcfe;">idx</span>].<span style="color: #9cdcfe;">red</span>   = *pixels++;</div><div>                <span style="color: #9cdcfe;">m_pixels</span>[<span style="color: #9cdcfe;">idx</span>].<span style="color: #9cdcfe;">green</span> = *pixels++;</div><div>                <span style="color: #9cdcfe;">m_pixels</span>[<span style="color: #9cdcfe;">idx</span>].<span style="color: #9cdcfe;">blue</span>  = *pixels++;</div><div><span style="color: #6a9955;">                // if Pixel channels &gt; 3, we have an alpha channel, skip it</span></div><div>                <span style="color: #c586c0;">if</span> (m_channels &gt; <span style="color: #b5cea8;">3</span>) {</div><div>                    pixels++;</div><div>                }</div><br /><div>            }</div><div>        }</div><div>    }</div><br /><div>    <span style="color: #c586c0;">catch</span> (<span style="color: #569cd6;">const</span> <span style="color: #9cdcfe;">Magick</span>::Exception &amp;e) {</div><div>        <span style="color: #4ec9b0;">std</span>::<span style="color: #9cdcfe;">cerr</span> <span style="color: #dcdcaa;">&lt;&lt;</span> <span style="color: #ce9178;">"Error reading image: "</span> &lt;&lt; <span style="color: #9cdcfe;">e</span>.<span style="color: #dcdcaa;">what</span>() &lt;&lt; <span style="color: #4ec9b0;">std</span>::<span style="color: #dcdcaa;">endl</span>;</div><div>    }</div><div>}</div></div></div></div></div></div></foreignObject><text x="1693" y="664" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">void ImgMgr::read_image(const std::string &amp;in_filename)...</text></switch></g><path d="M 2830 602 L 3240 602 L 3270 632 L 3270 718 L 2830 718 L 2830 602 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 3240 602 L 3240 632 L 3270 632 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 3240 602 L 3240 632 L 3270 632" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 438px; height: 1px; padding-top: 660px; margin-left: 2832px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;"><div style="line-height: 23px;">如果有4个channels, 比如 png 出了RGB channel, 还有一个 alpha channel,  就跳过。<br /><div style="border-color: var(--border-color);">if (m_channels &gt; <span style="border-color: var(--border-color); color: rgb(181, 206, 168);">3</span>) {pixels++;}</div></div></div></div></div></div></foreignObject><text x="2832" y="664" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">如果有4个channels, 比如 png 出了RGB channel, 还有一个 alpha channel,  就跳过。...</text></switch></g><path d="M 577.5 1910 L 624.88 1910" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 630.13 1910 L 623.13 1913.5 L 624.88 1910 L 623.13 1906.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 371.25 1940 L 371.25 2053.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 371.25 2058.88 L 367.75 2051.88 L 371.25 2053.63 L 374.75 2051.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="165" y="1880" width="412.5" height="60" rx="9" ry="9" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 411px; height: 1px; padding-top: 1910px; margin-left: 167px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div>    /* Instantiate our edge detector */</div><div>    <span style="color: #4ec9b0;">CannyEdgeDetector</span> <span style="color: #9cdcfe;">ced</span>(<span style="color: #9cdcfe;">img_mgr</span>);</div></div></div></div></div></div></div></div></div></div></foreignObject><text x="167" y="1914" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">/* Instantiate our edge detector */...</text></switch></g><path d="M 861.25 1910 L 1010 1910 L 1080.63 1910" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1085.88 1910 L 1078.88 1913.5 L 1080.63 1910 L 1078.88 1906.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 631.25 1860 L 831.25 1860 L 861.25 1890 L 861.25 1960 L 631.25 1960 L 631.25 1860 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 831.25 1860 L 831.25 1890 L 861.25 1890 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 831.25 1860 L 831.25 1890 L 861.25 1890" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 228px; height: 1px; padding-top: 1910px; margin-left: 633px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">img_mgr  是共享指针，指向 ImgMgr 对象<br />CannyEdgeDetector 是 自定义的类，定义了 detect_edge 函数，用于实现canny 检测。</div></div></div></foreignObject><text x="633" y="1914" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">img_mgr  是共享指针，指向 ImgMgr 对象...</text></switch></g><path d="M 2267 1890 L 2430 1890 L 2593.63 1890" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2598.88 1890 L 2591.88 1893.5 L 2593.63 1890 L 2591.88 1886.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1px; height: 1px; padding-top: 1893px; margin-left: 2357px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;"><font style="font-size: 17px;" color="#ff33ff">cu_detect_edges 函数</font></div></div></div></foreignObject><text x="2357" y="1896" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px">c...</text></switch></g><path d="M 1087 1440 L 2237 1440 L 2267 1470 L 2267 2410 L 1087 2410 L 1087 1440 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 2237 1440 L 2237 1470 L 2267 1470 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 2237 1440 L 2237 1470 L 2267 1470" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1178px; height: 1px; padding-top: 1925px; margin-left: 1089px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;"><div style="color: rgb(212, 212, 212);">/// <span style="color: #569cd6;">\brief</span><span style="color: #6a9955;"> Runs the canny edge detection algorithm on an image represented by</span></div><div style="color: rgb(212, 212, 212);"><span style="color: #6a9955;">/// the image manager instance this edge detection instance was constructed with.</span></div><div style="color: rgb(212, 212, 212);"><span style="color: #6a9955;">///</span></div><div style="color: rgb(212, 212, 212);"><span style="color: #569cd6;">void</span> <span style="color: #4ec9b0;">CannyEdgeDetector</span>::<span style="color: #dcdcaa;">detect_edges</span>(<span style="color: #569cd6;">bool</span> <span style="color: #9cdcfe;">serial</span>)</div><div style="color: rgb(212, 212, 212);">{</div><div style="color: rgb(212, 212, 212);">    <span style="color: #4ec9b0;">pixel_t</span> *<span style="color: #9cdcfe;">orig_pixels</span> = <span style="color: #9cdcfe;">m_image_mgr</span><span style="color: #dcdcaa;">-&gt;</span><span style="color: #dcdcaa;">getPixelHandle</span>();</div><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">unsigned</span> <span style="color: #9cdcfe;">input_pixel_length</span> = <span style="color: #9cdcfe;">m_image_mgr</span><span style="color: #dcdcaa;">-&gt;</span><span style="color: #dcdcaa;">getPixelCount</span>();</div><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">int</span> <span style="color: #9cdcfe;">rows</span> = <span style="color: #9cdcfe;">m_image_mgr</span><span style="color: #dcdcaa;">-&gt;</span><span style="color: #dcdcaa;">getImgHeight</span>();</div><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">int</span> <span style="color: #9cdcfe;">cols</span> = <span style="color: #9cdcfe;">m_image_mgr</span><span style="color: #dcdcaa;">-&gt;</span><span style="color: #dcdcaa;">getImgWidth</span>();</div><br /><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">double</span> <span style="color: #9cdcfe;">kernel</span>[<span style="color: #569cd6;">KERNEL_SIZE</span>][<span style="color: #569cd6;">KERNEL_SIZE</span>];</div><div style="color: rgb(212, 212, 212);">    <span style="color: #dcdcaa;">populate_blur_kernel</span>(<span style="color: #9cdcfe;">kernel</span>);</div><br /><div style="color: rgb(212, 212, 212);">    <span style="color: #4ec9b0;">pixel_t</span> *<span style="color: #9cdcfe;">rgb_buf</span> = <span style="color: #c586c0;">new</span> <span style="color: #4ec9b0;">pixel_t</span>[<span style="color: #9cdcfe;">input_pixel_length</span>];</div><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">pixel_channel_t</span> *<span style="color: #9cdcfe;">single_channel_buf0</span> = <span style="color: #c586c0;">new</span> <span style="color: #569cd6;">pixel_channel_t</span>[<span style="color: #9cdcfe;">input_pixel_length</span>]; </div><br /><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">assert</span>(<span style="color: #569cd6;">nullptr</span> != <span style="color: #9cdcfe;">rgb_buf</span>);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">assert</span>(<span style="color: #569cd6;">nullptr</span> != <span style="color: #9cdcfe;">single_channel_buf0</span>);</div><br /><div style="color: rgb(212, 212, 212);">    <span style="color: #4ec9b0;">std</span>::<span style="color: #4ec9b0;">chrono</span>::<span style="color: #4ec9b0;">high_resolution_clock</span>::<span style="color: #4ec9b0;">time_point</span> <span style="color: #9cdcfe;">start</span> = <span style="color: #4ec9b0;">std</span>::<span style="color: #4ec9b0;">chrono</span>::<span style="color: #4ec9b0;">high_resolution_clock</span>::<span style="color: #dcdcaa;">now</span>();</div><div style="color: rgb(212, 212, 212);">    <span style="color: rgb(197, 134, 192);">if</span><span style=""> (</span><span style="color: rgb(86, 156, 214);">true</span><span style=""> == </span><span style="color: rgb(156, 220, 254);">serial</span><span style="">) {</span></div><div style="color: rgb(212, 212, 212);"><span style=""><span style=""><span style=""><span style="">    </span></span>// cpu programming</span></span></div><div style="color: rgb(212, 212, 212);"><span style=""><span style="">        ...</span></span></div><div style="color: rgb(212, 212, 212);"><span style=""><span style="">    } else { // GPU</span><br /></span></div><div style="color: rgb(212, 212, 212);"><span style=""><span style="">        // </span></span>/* this is in a different file / function so we can compile it with nvcc, while this file is compiled by g++ */</div><div style=""><span style="color: rgb(212, 212, 212);"><span style=""></span></span><font color="#d4d4d4">        </font><font color="#ff33ff">cu_detect_edges</font><span style="color: rgb(212, 212, 212);">(</span><span style="color: rgb(156, 220, 254);">single_channel_buf0</span><span style="color: rgb(212, 212, 212);">, </span><span style="color: rgb(156, 220, 254);">orig_pixels</span><span style="color: rgb(212, 212, 212);">, </span><span style="color: rgb(156, 220, 254);">rows</span><span style="color: rgb(212, 212, 212);">, </span><span style="color: rgb(156, 220, 254);">cols</span><span style="color: rgb(212, 212, 212);">, </span><span style="color: rgb(156, 220, 254);">kernel</span><span style="color: rgb(212, 212, 212);">);</span></div><div style="color: rgb(212, 212, 212);"><span style="">    }<br /></span></div><div style="color: rgb(212, 212, 212);"><span style=""><br /></span></div><div style=""><div style="line-height: 23px;"><div style="color: rgb(212, 212, 212);">    std::<span style="color: #4ec9b0;">chrono</span>::<span style="color: #4ec9b0;">high_resolution_clock</span>::<span style="color: #4ec9b0;">time_point</span> <span style="color: #9cdcfe;">end</span> = <span style="color: #4ec9b0;">std</span>::<span style="color: #4ec9b0;">chrono</span>::<span style="color: #4ec9b0;">high_resolution_clock</span>::<span style="color: #dcdcaa;">now</span>();</div><br /><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">auto</span> <span style="color: #9cdcfe;">duration</span> = <span style="color: #4ec9b0;">std</span>::<span style="color: #4ec9b0;">chrono</span>::<span style="color: #dcdcaa;">duration_cast</span>&lt;<span style="color: #4ec9b0;">std</span>::<span style="color: #4ec9b0;">chrono</span>::<span style="color: #4ec9b0;">microseconds</span>&gt;(<span style="color: #9cdcfe;">end</span> <span style="color: #dcdcaa;">-</span> <span style="color: #9cdcfe;">start</span>).<span style="color: #dcdcaa;">count</span>();</div><div style="color: rgb(212, 212, 212);">    <span style="color: #4ec9b0;">std</span>::<span style="color: #9cdcfe;">cout</span> <span style="color: #dcdcaa;">&lt;&lt;</span> <span style="color: #ce9178;">"Elapsed time: "</span> <span style="color: #dcdcaa;">&lt;&lt;</span> <span style="color: #9cdcfe;">duration</span> <span style="color: #dcdcaa;">&lt;&lt;</span> <span style="color: #ce9178;">" us"</span> <span style="color: #dcdcaa;">&lt;&lt;</span> <span style="color: #4ec9b0;">std</span>::<span style="color: #dcdcaa;">endl</span>;</div><br /><div style="color: rgb(212, 212, 212);"><span style="color: #6a9955;">    /* copy edge detected image back into image mgr class so we can write it out later */</span></div><div style=""><font color="#d4d4d4">    </font><font color="#ff33ff">single_channel_to_grayscale</font><font color="#d4d4d4">(</font><span style="color: rgb(156, 220, 254);">rgb_buf</span><font color="#d4d4d4">, </font><span style="color: rgb(156, 220, 254);">single_channel_buf0</span><font color="#d4d4d4">, </font><span style="color: rgb(156, 220, 254);">rows</span><font color="#d4d4d4">, </font><span style="color: rgb(156, 220, 254);">cols</span><font color="#d4d4d4">);</font></div><div style="color: rgb(212, 212, 212);">    <span style="color: #dcdcaa;">memcpy</span>(<span style="color: #9cdcfe;">orig_pixels</span>, <span style="color: #9cdcfe;">rgb_buf</span>, <span style="color: #9cdcfe;">input_pixel_length</span>*<span style="color: #569cd6;">sizeof</span>(<span style="color: #4ec9b0;">pixel_t</span>));</div><br /><div style="color: rgb(212, 212, 212);">    <span style="color: #c586c0;">delete</span><span style="color: #c586c0;"> []</span><span style="color: #9cdcfe;">rgb_buf</span>;</div><div style="color: rgb(212, 212, 212);">    <span style="color: #c586c0;">delete</span><span style="color: #c586c0;"> []</span><span style="color: #9cdcfe;">single_channel_buf0</span>;</div></div></div><div style="color: rgb(212, 212, 212);"><span style=""><span style="">    }</span></span></div><div style="color: rgb(212, 212, 212);"><span style=""><span style="">    </span></span><br /></div></div></div></div></div></foreignObject><text x="1089" y="1929" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">/// \brief Runs the canny edge detection algorithm on an image represented by...</text></switch></g><path d="M 3920 2335 L 4020 2335 L 4020 1520 L 4273.63 1520" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 4278.88 1520 L 4271.88 1523.5 L 4273.63 1520 L 4271.88 1516.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 1523px; margin-left: 4175px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;"><font style="font-size: 17px;" color="#ff9999">cu_detect_edges 函数解析</font></div></div></div></foreignObject><text x="4175" y="1526" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">c...</text></switch></g><path d="M 3920 2335 L 4020 2335 L 4020 701 L 4349.63 701" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 4354.88 701 L 4347.88 704.5 L 4349.63 701 L 4347.88 697.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 703px; margin-left: 4206px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;"><font style="font-size: 16px;" color="#ff33ff">pixel_t 数据类型</font></div></div></div></foreignObject><text x="4206" y="706" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">p...</text></switch></g><path d="M 3920 2335 L 4020 2335 L 4020 2790 L 4193.63 2790" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 4198.88 2790 L 4191.88 2793.5 L 4193.63 2790 L 4191.88 2786.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 2795px; margin-left: 4102px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;"><font style="font-size: 18px;" color="#ff9999">高斯核函数例子</font></div></div></div></foreignObject><text x="4102" y="2798" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">高斯核函数例子</text></switch></g><path d="M 2600 1080 L 3890 1080 L 3920 1110 L 3920 2682.5 L 2600 2682.5 L 2600 1080 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 3890 1080 L 3890 1110 L 3920 1110 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 3890 1080 L 3890 1110 L 3920 1110" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1318px; height: 1px; padding-top: 1881px; margin-left: 2602px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;"><div style="line-height: 23px;"><div style="color: rgb(212, 212, 212);">//*****************************************************************************************</div><div style="color: rgb(212, 212, 212);"><span style="color: #6a9955;">// Entry point for serial program calling CUDA implementation</span></div><div style="color: rgb(212, 212, 212);"><span style="color: #6a9955;">//*****************************************************************************************</span></div><br /><div style=""><span style="color: rgb(86, 156, 214);">void</span> <font color="#ff33ff">cu_detect_edges</font><font color="#d4d4d4">(</font><span style="color: rgb(86, 156, 214);">pixel_channel_t</span> <span style="color: rgb(86, 156, 214);">*</span><span style="color: rgb(156, 220, 254);">final_pixels</span><font color="#d4d4d4">, </font><span style="color: rgb(78, 201, 176);">pixel_t</span> <span style="color: rgb(86, 156, 214);">*</span><span style="color: rgb(156, 220, 254);">orig_pixels</span><font color="#d4d4d4">, </font><span style="color: rgb(86, 156, 214);">int</span> <span style="color: rgb(156, 220, 254);">rows</span><font color="#d4d4d4">, </font><span style="color: rgb(86, 156, 214);">int</span> <span style="color: rgb(156, 220, 254);">cols</span><font color="#d4d4d4">, </font><span style="color: rgb(86, 156, 214);">double</span> <span style="color: rgb(156, 220, 254);">kernel</span><font color="#d4d4d4">[</font><span style="color: rgb(86, 156, 214);">KERNEL_SIZE</span><font color="#d4d4d4">][</font><span style="color: rgb(86, 156, 214);">KERNEL_SIZE</span><font color="#d4d4d4">]) </font></div><div style="color: rgb(212, 212, 212);">{</div><div style="color: rgb(212, 212, 212);"><span style="color: #6a9955;">    /* kernel execution configuration parameters */</span></div><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">int</span> num_blks = (rows * cols) / <span style="color: #b5cea8;">1024</span>;</div><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">int</span> thd_per_blk = <span style="color: #b5cea8;">1024</span>;</div><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">int</span> grid = <span style="color: #b5cea8;">0</span>;</div><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">pixel_channel_t</span> t_high = <span style="color: #b5cea8;">0xFCC</span>;</div><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">pixel_channel_t</span> t_low = <span style="color: #b5cea8;">0xF5</span>;</div><br /><div style="color: rgb(212, 212, 212);"><span style="color: #6a9955;">    /* device buffers */</span> </div><div style="color: rgb(212, 212, 212);">    <span style="color: #4ec9b0;">pixel_t</span> *in, *out;</div><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">pixel_channel_t</span> *single_channel_buf0;</div><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">pixel_channel_t</span> *single_channel_buf1;</div><div style="color: rgb(212, 212, 212);">    pixel_channel_t_signed *deltaX;</div><div style="color: rgb(212, 212, 212);">    pixel_channel_t_signed *deltaY;</div><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">double</span> *d_blur_kernel;</div><div style="color: rgb(212, 212, 212);">    <span style="color: #569cd6;">unsigned</span> *idx_map;</div><br /><div style="color: rgb(212, 212, 212);"><span style="color: #6a9955;">    /* allocate device memory */</span></div><div style="color: rgb(212, 212, 212);">    <span style="color: #dcdcaa;">cudaMalloc</span>((<span style="color: #569cd6;">void</span>**) &amp;in, <span style="color: #569cd6;">sizeof</span>(<span style="color: #4ec9b0;">pixel_t</span>)*rows*cols); </div><div style="color: rgb(212, 212, 212);">    <span style="color: #dcdcaa;">cudaMalloc</span>((<span style="color: #569cd6;">void</span>**) &amp;out, <span style="color: #569cd6;">sizeof</span>(<span style="color: #4ec9b0;">pixel_t</span>)*rows*cols); </div><div style="color: rgb(212, 212, 212);">    <span style="color: #dcdcaa;">cudaMalloc</span>((<span style="color: #569cd6;">void</span>**) &amp;single_channel_buf0, <span style="color: #569cd6;">sizeof</span>(<span style="color: #569cd6;">pixel_channel_t</span>)*rows*cols); </div><div style="color: rgb(212, 212, 212);">    <span style="color: #dcdcaa;">cudaMalloc</span>((<span style="color: #569cd6;">void</span>**) &amp;single_channel_buf1, <span style="color: #569cd6;">sizeof</span>(<span style="color: #569cd6;">pixel_channel_t</span>)*rows*cols); </div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaMalloc</span>((<span style="color: #569cd6;">void</span>**) &amp;<span style="color: #9cdcfe;">deltaX</span>, <span style="color: #569cd6;">sizeof</span>(<span style="color: #4ec9b0;">pixel_channel_t_signed</span>)*rows*cols);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaMalloc</span>((<span style="color: #569cd6;">void</span>**) &amp;<span style="color: #9cdcfe;">deltaY</span>, <span style="color: #569cd6;">sizeof</span>(<span style="color: #4ec9b0;">pixel_channel_t_signed</span>)*rows*cols);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaMalloc</span>((<span style="color: #569cd6;">void</span>**) &amp;<span style="color: #9cdcfe;">idx_map</span>, <span style="color: #569cd6;">sizeof</span>(<span style="color: #9cdcfe;">idx_map</span>[<span style="color: #b5cea8;">0</span>])*rows*cols);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaMalloc</span>((<span style="color: #569cd6;">void</span>**) &amp;<span style="color: #9cdcfe;">d_blur_kernel</span>, <span style="color: #569cd6;">sizeof</span>(<span style="color: #9cdcfe;">d_blur_kernel</span>[<span style="color: #b5cea8;">0</span>])*<span style="color: #569cd6;">KERNEL_SIZE</span>*<span style="color: #569cd6;">KERNEL_SIZE</span>);</div><br /><div style="color: rgb(212, 212, 212);"><span style="color: #6a9955;">    /* data transfer image pixels to device */</span></div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaMemcpy</span>(<span style="color: #9cdcfe;">in</span>, orig_pixels, rows*cols*<span style="color: #569cd6;">sizeof</span>(<span style="color: #4ec9b0;">pixel_t</span>), cudaMemcpyHostToDevice);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaMemcpy</span>(<span style="color: #9cdcfe;">d_blur_kernel</span>, kernel, <span style="color: #569cd6;">sizeof</span>(<span style="color: #9cdcfe;">d_blur_kernel</span>[<span style="color: #b5cea8;">0</span>])*<span style="color: #569cd6;">KERNEL_SIZE</span>*<span style="color: #569cd6;">KERNEL_SIZE</span>, cudaMemcpyHostToDevice);</div><br /><div style="color: rgb(212, 212, 212);"><span style="color: #6a9955;">    /* run canny edge detection core - CUDA kernels */</span></div><div style="color: rgb(212, 212, 212);"><span style="color: #6a9955;">    /* use streams to ensure the kernels are in the same task */</span></div><div style=""><font color="#d4d4d4">    </font><span style="color: rgb(78, 201, 176);">cudaStream_t</span> <font color="#ff33ff">stream</font><font color="#d4d4d4">;</font></div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaStreamCreate</span>(&amp;<span style="color: #9cdcfe;">stream</span>);</div><div style=""><font color="#d4d4d4">    </font><font color="#ff9999">cu_apply_gaussian_filter</font><font color="#d4d4d4">&lt;&lt;&lt;num_blks, thd_per_blk, grid, stream&gt;&gt;&gt;(in, out, rows, cols, d_blur_kernel);</font></div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cu_compute_intensity_gradient</span>&lt;&lt;&lt;num_blks, thd_per_blk, grid, stream&gt;&gt;&gt;(out, deltaX, deltaY, rows, cols);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cu_magnitude</span>&lt;&lt;&lt;num_blks, thd_per_blk, grid, stream&gt;&gt;&gt;(deltaX, deltaY, single_channel_buf0, rows, cols);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cu_suppress_non_max</span>&lt;&lt;&lt;num_blks, thd_per_blk, grid, stream&gt;&gt;&gt;(single_channel_buf0, deltaX, deltaY, single_channel_buf1, rows, cols);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cu_hysteresis_high</span>&lt;&lt;&lt;num_blks, thd_per_blk, grid, stream&gt;&gt;&gt;(single_channel_buf0, single_channel_buf1, idx_map, t_high, rows, cols);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cu_hysteresis_low</span>&lt;&lt;&lt;num_blks, thd_per_blk, grid, stream&gt;&gt;&gt;(single_channel_buf0, single_channel_buf1, idx_map, t_low, rows, cols);</div><br /><div style="color: rgb(212, 212, 212);"><span style="color: #6a9955;">    /* wait for everything to finish */</span></div><div style="color: rgb(212, 212, 212);">    <span style="color: #dcdcaa;">cudaDeviceSynchronize</span>();</div><br /><div style="color: rgb(212, 212, 212);"><span style="color: #6a9955;">    /* copy result back to the host */</span></div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaMemcpy</span>(final_pixels, single_channel_buf0, rows*cols*<span style="color: #569cd6;">sizeof</span>(<span style="color: #569cd6;">pixel_channel_t</span>), cudaMemcpyDeviceToHost);</div><br /><div style="color: rgb(212, 212, 212);"><span style="color: #6a9955;">    /* cleanup */</span></div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaFree</span>(<span style="color: #9cdcfe;">in</span>);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaFree</span>(<span style="color: #9cdcfe;">out</span>);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaFree</span>(<span style="color: #9cdcfe;">single_channel_buf0</span>);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaFree</span>(<span style="color: #9cdcfe;">single_channel_buf1</span>);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaFree</span>(<span style="color: #9cdcfe;">deltaX</span>);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaFree</span>(<span style="color: #9cdcfe;">deltaY</span>);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaFree</span>(<span style="color: #9cdcfe;">idx_map</span>);</div><div style="color: rgb(212, 212, 212);">    <span style="color: #9cdcfe;">cudaFree</span>(<span style="color: #9cdcfe;">d_blur_kernel</span>);</div><div style="color: rgb(212, 212, 212);">}</div></div></div></div></div></div></foreignObject><text x="2602" y="1885" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">//*****************************************************************************************...</text></switch></g><path d="M 4280 990 L 5261 990 L 5291 1020 L 5291 2050 L 4280 2050 L 4280 990 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 5261 990 L 5261 1020 L 5291 1020 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 5261 990 L 5261 1020 L 5291 1020" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1009px; height: 1px; padding-top: 1520px; margin-left: 4282px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="background-color: rgb(30, 30, 30); line-height: 23px;"><div style="line-height: 23px;"><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px;">//*****************************************************************************************</div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px;"><span style="color: #6a9955;">// Entry point for serial program calling CUDA implementation</span></div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px;"><span style="color: #6a9955;">//*****************************************************************************************</span></div><br /><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px;"><span style="color: #569cd6;">void</span> <span style="color: #dcdcaa;">cu_detect_edges</span>(<span style="color: #569cd6;">pixel_channel_t</span> <span style="color: #569cd6;">*</span><span style="color: #9cdcfe;">final_pixels</span>, <span style="color: #4ec9b0;">pixel_t</span> <span style="color: #569cd6;">*</span><span style="color: #9cdcfe;">orig_pixels</span>, <span style="color: #569cd6;">int</span> <span style="color: #9cdcfe;">rows</span>, <span style="color: #569cd6;">int</span> <span style="color: #9cdcfe;">cols</span>, <span style="color: #569cd6;">double</span> <span style="color: #9cdcfe;">kernel</span>[<span style="color: #569cd6;">KERNEL_SIZE</span>][<span style="color: #569cd6;">KERNEL_SIZE</span>]) </div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px;"><br /></div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px;">输入参数：</div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px;">orig_pixels ： 原来的像素<br /></div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px;">final_pixels ： 输出的像素<br /></div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px;">kernel ： 高斯核<br /></div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px;"><br /></div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px;"><br /></div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px;">num_blks 表示 GPU块的个数，每个块的线程数：thd_per_blk = 1024， 使用的是一维grid, grid = 0<br /></div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px;"><div style="border-color: var(--border-color);">    /* kernel execution configuration parameters */</div><div style="border-color: var(--border-color);">    <span style="border-color: var(--border-color); color: rgb(86, 156, 214);">int</span> num_blks = (rows * cols) / <span style="border-color: var(--border-color); color: rgb(181, 206, 168);">1024</span>;</div><div style="border-color: var(--border-color);">    <span style="border-color: var(--border-color); color: rgb(86, 156, 214);">int</span> thd_per_blk = <span style="border-color: var(--border-color); color: rgb(181, 206, 168);">1024</span>;</div><div style="border-color: var(--border-color);">    <span style="border-color: var(--border-color); color: rgb(86, 156, 214);">int</span> grid = <span style="border-color: var(--border-color); color: rgb(181, 206, 168);">0</span>;</div></div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; border-color: var(--border-color);"><br /></div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; border-color: var(--border-color);">cudaMalloc 向设备申请内存<br /></div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; border-color: var(--border-color);"><br /></div><div style="border-color: var(--border-color);"><div style="border-color: var(--border-color);"><font color="#d4d4d4" face="Consolas, Courier New, monospace" style="font-size: 17px;">#que cuda GPU 编程使用同一个流（stream)有同步问题吗？使用steram 有什么好处？</font></div><div style="border-color: var(--border-color);"><font color="#d4d4d4" face="Consolas, Courier New, monospace"><span style="font-size: 17px;"><br /></span></font></div><div style="border-color: var(--border-color);"><font color="#d4d4d4" face="Consolas, Courier New, monospace"><span style="font-size: 17px;"><span style=""><span style="white-space: pre;">    </span></span>- @blk 问题：同一个stream中的CUDA kernel函数按照提交的顺序依次执行，也就是说，一个CUDA kernel函数会等待前一个CUDA kernel函数执行完成之后才会开始执行。如果后一个kernel 函数 需要上一个kernel 函数的输出，但因为是按照提交的顺序依次执行，所以就不需要创建CUDA事件来同步？</span></font></div><div style="border-color: var(--border-color);"><font color="#d4d4d4" face="Consolas, Courier New, monospace"><span style="font-size: 17px;"><span style=""><span style="white-space: pre;">    </span></span>- #ans</span></font></div><div style="border-color: var(--border-color);"><font color="#d4d4d4" face="Consolas, Courier New, monospace"><span style="font-size: 17px;">这个问题，我也是找了挺久的答案，chatgpt 并不靠谱，经常说错，不过还得到了比较好的回答。虽然我不知道答案，但是可以判断chatpgt的回答是否靠谱。</span></font></div><div style="border-color: var(--border-color);"><font color="#d4d4d4" face="Consolas, Courier New, monospace"><span style="font-size: 17px;"><br /></span></font></div><div style="border-color: var(--border-color);"><font color="#d4d4d4" face="Consolas, Courier New, monospace"><span style="font-size: 17px;">chatgpt 回答：</span></font></div><div style="border-color: var(--border-color);"><font color="#d4d4d4" face="Consolas, Courier New, monospace"><span style="font-size: 17px;">是的，你的理解是正确的。在同一个流中，CUDA核函数会按照它们被提交的顺序依次执行。这意味着后一个核函数会等待前一个核函数执行完成之后才开始执行。</span></font></div><div style="border-color: var(--border-color);"><font color="#d4d4d4" face="Consolas, Courier New, monospace"><span style="font-size: 17px;"><br /></span></font></div><div style="border-color: var(--border-color);"><font color="#d4d4d4" face="Consolas, Courier New, monospace"><span style="font-size: 17px;">如果后一个核函数需要上一个核函数的输出作为输入，你不需要显式地创建CUDA事件来进行同步。由于同一个流中的任务是按照提交的顺序执行的，前一个核函数的输出在后一个核函数中是可见的。CUDA运行时会自动处理数据的依赖关系，并确保正确的执行顺序和数据一致性。</span></font></div><div style="border-color: var(--border-color);"><font color="#d4d4d4" face="Consolas, Courier New, monospace"><span style="font-size: 17px;"><br /></span></font></div><div style="border-color: var(--border-color);"><font color="#d4d4d4" face="Consolas, Courier New, monospace"><span style="font-size: 17px;">因此，在这种情况下，你不需要使用CUDA事件来进行显式同步。通过将这两个核函数提交到同一个流中，并按照正确的顺序提交它们，CUDA运行时会自动处理同步和数据依赖。</span></font></div></div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px;"><br /></div><div style="color: rgb(212, 212, 212); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px;"><br /></div></div></div></div></div></div></foreignObject><text x="4282" y="1524" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">//*****************************************************************************************...</text></switch></g><path d="M 4356 0 L 4956 0 L 4986 30 L 4986 970 L 4356 970 L 4356 0 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 4956 0 L 4956 30 L 4986 30 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 4956 0 L 4956 30 L 4986 30" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 628px; height: 1px; padding-top: 485px; margin-left: 4358px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div>#define<span style="color: #569cd6;"> </span><span style="color: #569cd6;">pixel_channel_t</span><span style="color: #569cd6;"> </span><span style="color: #4ec9b0;">uint16_t</span></div><br /><div><span style="color: #569cd6;">struct</span> <span style="color: #4ec9b0;">pixel_t</span> {</div><div>    <span style="color: #569cd6;">pixel_channel_t</span> <span style="color: #9cdcfe;">red</span>;</div><div>    <span style="color: #569cd6;">pixel_channel_t</span> <span style="color: #9cdcfe;">green</span>;</div><div>    <span style="color: #569cd6;">pixel_channel_t</span> <span style="color: #9cdcfe;">blue</span>;</div><br /><div><span style="color: #6a9955;">    /* Overloaded operators for comparing pixels */</span></div><div><span style="color: #6a9955;">    /* We only use red channel here, not sure if we need this */</span></div><div>    <span style="color: #569cd6;">bool</span> <span style="color: #dcdcaa;">operator==</span>(<span style="color: #569cd6;">const</span> <span style="color: #4ec9b0;">pixel_t</span> <span style="color: #569cd6;">&amp;</span><span style="color: #9cdcfe;">rhs</span>) {</div><div>        <span style="color: #c586c0;">return</span> (<span style="color: #9cdcfe;">red</span> == <span style="color: #9cdcfe;">rhs</span>.<span style="color: #9cdcfe;">red</span>);</div><div>    }</div><br /><div>    <span style="color: #569cd6;">bool</span> <span style="color: #dcdcaa;">operator!=</span>(<span style="color: #569cd6;">const</span> <span style="color: #4ec9b0;">pixel_t</span> <span style="color: #569cd6;">&amp;</span><span style="color: #9cdcfe;">rhs</span>) {</div><div>        <span style="color: #c586c0;">return</span> (<span style="color: #9cdcfe;">red</span> != <span style="color: #9cdcfe;">rhs</span>.<span style="color: #9cdcfe;">red</span>);</div><div>    }</div><br /><div>    <span style="color: #569cd6;">bool</span> <span style="color: #dcdcaa;">operator&gt;</span>(<span style="color: #569cd6;">const</span> <span style="color: #4ec9b0;">pixel_t</span> <span style="color: #569cd6;">&amp;</span><span style="color: #9cdcfe;">rhs</span>) {</div><div>        <span style="color: #c586c0;">return</span> (<span style="color: #9cdcfe;">red</span> &gt; <span style="color: #9cdcfe;">rhs</span>.<span style="color: #9cdcfe;">red</span>);</div><div>    }</div><br /><div>    <span style="color: #569cd6;">bool</span> <span style="color: #dcdcaa;">operator&gt;=</span>(<span style="color: #569cd6;">const</span> <span style="color: #4ec9b0;">pixel_t</span> <span style="color: #569cd6;">&amp;</span><span style="color: #9cdcfe;">rhs</span>) {</div><div>        <span style="color: #c586c0;">return</span> (<span style="color: #9cdcfe;">red</span> &gt;= <span style="color: #9cdcfe;">rhs</span>.<span style="color: #9cdcfe;">red</span>);</div><div>    }</div><br /><div>    <span style="color: #569cd6;">bool</span> <span style="color: #dcdcaa;">operator&lt;</span>(<span style="color: #569cd6;">const</span> <span style="color: #4ec9b0;">pixel_t</span> <span style="color: #569cd6;">&amp;</span><span style="color: #9cdcfe;">rhs</span>) {</div><div>        <span style="color: #c586c0;">return</span> (<span style="color: #9cdcfe;">red</span> &lt; <span style="color: #9cdcfe;">rhs</span>.<span style="color: #9cdcfe;">red</span>);</div><div>    }</div><br /><div>    <span style="color: #569cd6;">bool</span> <span style="color: #dcdcaa;">operator&lt;=</span>(<span style="color: #569cd6;">const</span> <span style="color: #4ec9b0;">pixel_t</span> <span style="color: #569cd6;">&amp;</span><span style="color: #9cdcfe;">rhs</span>) {</div><div>        <span style="color: #c586c0;">return</span> (<span style="color: #9cdcfe;">red</span> &lt;= <span style="color: #9cdcfe;">rhs</span>.<span style="color: #9cdcfe;">red</span>);</div><div>    }</div><div>};</div><br /><div><span style="color: #569cd6;">struct</span> <span style="color: #4ec9b0;">pixel_t_signed</span> {</div><div>    <span style="color: #4ec9b0;">int16_t</span> <span style="color: #9cdcfe;">red</span>;</div><div>    <span style="color: #4ec9b0;">int16_t</span> <span style="color: #9cdcfe;">green</span>;</div><div>    <span style="color: #4ec9b0;">int16_t</span> <span style="color: #9cdcfe;">blue</span>;</div><div>};</div><br /><div><span style="color: #569cd6;">typedef</span> <span style="color: #4ec9b0;">int16_t</span> <span style="color: #4ec9b0;">pixel_channel_t_signed</span>;</div></div></div></div></div></div></div></foreignObject><text x="4358" y="489" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">#define pixel_channel_t uint16_t...</text></switch></g><path d="M 371.5 2120 L 371.5 2280 L 371.5 2433.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 371.5 2438.88 L 368 2431.88 L 371.5 2433.63 L 375 2431.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 577.5 2090 L 638.63 2090" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 643.88 2090 L 636.88 2093.5 L 638.63 2090 L 636.88 2086.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="165" y="2060" width="412.5" height="60" rx="9" ry="9" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 411px; height: 1px; padding-top: 2090px; margin-left: 167px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div>    /* run edge detection algorithm */</div><div>    <span style="color: #9cdcfe;">ced</span>.<span style="color: #dcdcaa;">detect_edges</span>(<span style="color: #9cdcfe;">args</span>.<span style="color: #9cdcfe;">serial</span>);</div></div></div></div></div></div></div></div></div></div></div></foreignObject><text x="167" y="2094" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">/* run edge detection algorithm */...</text></switch></g><path d="M 643.75 2535 L 870 2535 L 870 2930 L 1083.63 2930" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1088.88 2930 L 1081.88 2933.5 L 1083.63 2930 L 1081.88 2926.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 2616px; margin-left: 872px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;">write_image</div></div></div></foreignObject><text x="872" y="2620" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">w...</text></switch></g><path d="M 371.25 2630 L 371.25 2768.63" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 371.25 2773.88 L 367.75 2766.88 L 371.25 2768.63 L 374.75 2766.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="98.75" y="2440" width="545" height="190" rx="28.5" ry="28.5" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 543px; height: 1px; padding-top: 2535px; margin-left: 101px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div>    /* write results */</div><div>    <span style="color: #9cdcfe;">img_mgr</span><span style="color: #dcdcaa;">-&gt;</span><span style="color: #dcdcaa;">write_image</span>(<span style="color: #9cdcfe;">args</span>.<span style="color: #9cdcfe;">outFile</span>);</div><div>    <span style="color: #4ec9b0;">std</span>::<span style="color: #9cdcfe;">cout</span> <span style="color: #dcdcaa;">&lt;&lt;</span> <span style="color: #ce9178;">"Edge detection complete"</span> <span style="color: #dcdcaa;">&lt;&lt;</span> <span style="color: #4ec9b0;">std</span>::<span style="color: #dcdcaa;">endl</span>;</div><br /><div>    <span style="color: #c586c0;">return</span> <span style="color: #4fc1ff;">ED_SUCCESS</span>;</div></div></div></div></div></div></div></div></div></div></div></div></foreignObject><text x="101" y="2539" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">/* write results */...</text></switch></g><path d="M 645 2040 L 845 2040 L 875 2070 L 875 2140 L 645 2140 L 645 2040 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 845 2040 L 845 2070 L 875 2070 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 845 2040 L 845 2070 L 875 2070" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 228px; height: 1px; padding-top: 2090px; margin-left: 647px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">执行 detect_edges</div></div></div></foreignObject><text x="647" y="2094" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">执行 detect_edges</text></switch></g><path d="M 1090 2430 L 1860 2430 L 1890 2460 L 1890 3315 L 1090 3315 L 1090 2430 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 1860 2430 L 1860 2460 L 1890 2460 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 1860 2430 L 1860 2460 L 1890 2460" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 798px; height: 1px; padding-top: 2873px; margin-left: 1092px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;"><div>///</div><div><span style="color: #6a9955;">/// </span><span style="color: #569cd6;">\brief</span><span style="color: #6a9955;"> Given a filename, creat an image file using</span></div><div><span style="color: #6a9955;">/// the pixel data of this image manager instance.</span></div><div><span style="color: #6a9955;">///</span></div><div><span style="color: #569cd6;">void</span> <span style="color: #4ec9b0;">ImgMgr</span>::<span style="color: #dcdcaa;">write_image</span>(<span style="color: #569cd6;">const</span> <span style="color: #4ec9b0;">std</span>::<span style="color: #4ec9b0;">string</span> <span style="color: #569cd6;">&amp;</span><span style="color: #9cdcfe;">out_filename</span>)</div><div>{</div><div>    <span style="color: #c586c0;">try</span> {</div><div><span style="color: #6a9955;">        /* create a new white image of the same size as our input image */</span></div><div>        <span style="color: #4ec9b0;">Magick</span>::Image <span style="color: #dcdcaa;">img</span>(<span style="color: #4ec9b0;">Magick</span>::<span style="color: #dcdcaa;">Geometry</span>(m_img_width, m_img_height), <span style="color: #4ec9b0;">Magick</span>::<span style="color: #dcdcaa;">Color</span>(<span style="color: #ce9178;">"white"</span>));</div><div><span style="color: #6a9955;">        /* get image lock */</span></div><div>        <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">modifyImage</span>();</div><div><span style="color: #6a9955;">        /* overwrite new image's pixels with our own */</span></div><div>        <span style="color: #4ec9b0;">Magick</span>::Quantum *pixels = <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">getPixels</span>(<span style="color: #b5cea8;">0</span>, <span style="color: #b5cea8;">0</span>, <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">columns</span>(), <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">rows</span>());</div><div>        <span style="color: #c586c0;">for</span> (<span style="color: #569cd6;">unsigned</span> <span style="color: #9cdcfe;">i</span> = <span style="color: #b5cea8;">0</span>; <span style="color: #9cdcfe;">i</span> &lt; <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">rows</span>(); <span style="color: #9cdcfe;">i</span>++) {</div><div>            <span style="color: #c586c0;">for</span> (<span style="color: #569cd6;">unsigned</span> <span style="color: #9cdcfe;">j</span> = <span style="color: #b5cea8;">0</span>; <span style="color: #9cdcfe;">j</span> &lt; <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">columns</span>(); <span style="color: #9cdcfe;">j</span>++) {</div><div><span style="color: #6a9955;">                /* extract channels from our array of pixel structs */</span></div><div>                <span style="color: #569cd6;">unsigned</span> <span style="color: #9cdcfe;">idx</span> = <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">columns</span>() * <span style="color: #9cdcfe;">i</span> + <span style="color: #9cdcfe;">j</span>; </div><div>                *pixels++ = <span style="color: #9cdcfe;">m_pixels</span>[<span style="color: #9cdcfe;">idx</span>].<span style="color: #9cdcfe;">red</span>;</div><div>                *pixels++ = <span style="color: #9cdcfe;">m_pixels</span>[<span style="color: #9cdcfe;">idx</span>].<span style="color: #9cdcfe;">green</span>;</div><div>                *pixels++ = <span style="color: #9cdcfe;">m_pixels</span>[<span style="color: #9cdcfe;">idx</span>].<span style="color: #9cdcfe;">blue</span>;</div><div>            }</div><div>        }</div><div><span style="color: #6a9955;">        /* save image */</span></div><div>        <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">syncPixels</span>();</div><div><span style="color: #6a9955;">        /* write to output file */</span></div><div>        <span style="color: #9cdcfe;">img</span>.<span style="color: #dcdcaa;">write</span>(<span style="color: #9cdcfe;">out_filename</span>);</div><div>    }</div><br /><div>    <span style="color: #c586c0;">catch</span> (<span style="color: #569cd6;">const</span> <span style="color: #9cdcfe;">Magick</span>::Exception &amp;e) {</div><div>        <span style="color: #4ec9b0;">std</span>::<span style="color: #9cdcfe;">cerr</span> <span style="color: #dcdcaa;">&lt;&lt;</span> <span style="color: #ce9178;">"Error writing image: "</span> &lt;&lt; <span style="color: #9cdcfe;">e</span>.<span style="color: #dcdcaa;">what</span>() &lt;&lt; <span style="color: #4ec9b0;">std</span>::<span style="color: #dcdcaa;">endl</span>;</div><div>    }</div><div>}</div></div></div></div></div></foreignObject><text x="1092" y="2876" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">///...</text></switch></g><rect x="311.25" y="2775" width="120" height="60" rx="9" ry="9" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 2805px; margin-left: 312px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><font color="#ff33ff" style="font-size: 18px;">结束</font></div></div></div></foreignObject><text x="371" y="2809" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">结束</text></switch></g><path d="M 4200 2050 L 5591 2050 L 5621 2080 L 5621 3380 L 4200 3380 L 4200 2050 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 5591 2050 L 5591 2080 L 5621 2080 Z" fill-opacity="0.05" fill="#000000" stroke="none" pointer-events="all"/><path d="M 5591 2050 L 5591 2080 L 5621 2080" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 1419px; height: 1px; padding-top: 2715px; margin-left: 4202px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 17px; line-height: 23px;"><div style="line-height: 23px;"><div style="line-height: 23px;"><div>//*****************************************************************************************</div><div><span style="color: #6a9955;">// CUDA Gaussian Filter Implementation</span></div><div><span style="color: #6a9955;">//*****************************************************************************************</span></div><br /><div><span style="color: #6a9955;">///</span></div><div><span style="color: #6a9955;">/// </span><span style="color: #569cd6;">\brief</span><span style="color: #6a9955;"> Apply gaussian filter. This is the CUDA kernel for applying a gaussian blur to an image.</span></div><div><span style="color: #6a9955;">///</span></div><div><span style="color: #9cdcfe;">__global__</span></div><div><span style="color: #569cd6;">void</span> <span style="color: #dcdcaa;">cu_apply_gaussian_filter</span>(<span style="color: #4ec9b0;">pixel_t</span> <span style="color: #569cd6;">*</span><span style="color: #9cdcfe;">in_pixels</span>, <span style="color: #4ec9b0;">pixel_t</span> <span style="color: #569cd6;">*</span><span style="color: #9cdcfe;">out_pixels</span>, <span style="color: #569cd6;">int</span> <span style="color: #9cdcfe;">rows</span>, <span style="color: #569cd6;">int</span> <span style="color: #9cdcfe;">cols</span>, <span style="color: #569cd6;">double</span> <span style="color: #569cd6;">*</span><span style="color: #9cdcfe;">in_kernel</span>)</div><div>{</div><div><span style="color: #6a9955;">    //copy kernel array from global memory to a shared array</span></div><div>    <span style="color: #569cd6;">__shared__</span> <span style="color: #569cd6;">double</span> <span style="color: #9cdcfe;">kernel</span>[<span style="color: #569cd6;">KERNEL_SIZE</span>][<span style="color: #569cd6;">KERNEL_SIZE</span>];</div><div>    <span style="color: #c586c0;">for</span> (<span style="color: #569cd6;">int</span> i = <span style="color: #b5cea8;">0</span>; i &lt; <span style="color: #569cd6;">KERNEL_SIZE</span>; ++i) {</div><div>        <span style="color: #c586c0;">for</span> (<span style="color: #569cd6;">int</span> j = <span style="color: #b5cea8;">0</span>; j &lt; <span style="color: #569cd6;">KERNEL_SIZE</span>; ++j) {</div><div>            <span style="color: #9cdcfe;">kernel</span>[i][j] = <span style="color: #9cdcfe;">in_kernel</span>[i * <span style="color: #569cd6;">KERNEL_SIZE</span> + j];</div><div>        }</div><div>    }</div><div>    </div><div>    <span style="color: #dcdcaa;">__syncthreads</span>();</div><br /><div><span style="color: #6a9955;">    //determine id of thread which corresponds to an individual pixel</span></div><div>    <span style="color: #569cd6;">int</span> pixNum = <span style="color: #569cd6;">blockIdx</span>.x * <span style="color: #569cd6;">blockDim</span>.x + <span style="color: #569cd6;">threadIdx</span>.x;</div><div>    <span style="color: #c586c0;">if</span> (pixNum &gt;= <span style="color: #b5cea8;">0</span> &amp;&amp; pixNum &lt; rows * cols) {</div><div>   </div><div>        <span style="color: #569cd6;">double</span> kernelSum;</div><div>        <span style="color: #569cd6;">double</span> redPixelVal;</div><div>        <span style="color: #569cd6;">double</span> greenPixelVal;</div><div>        <span style="color: #569cd6;">double</span> bluePixelVal;</div><br /><div><span style="color: #6a9955;">        //Apply Kernel to each pixel of image</span></div><div>        <span style="color: #c586c0;">for</span> (<span style="color: #569cd6;">int</span> i = <span style="color: #b5cea8;">0</span>; i &lt; <span style="color: #569cd6;">KERNEL_SIZE</span>; ++i) {</div><div>            <span style="color: #c586c0;">for</span> (<span style="color: #569cd6;">int</span> j = <span style="color: #b5cea8;">0</span>; j &lt; <span style="color: #569cd6;">KERNEL_SIZE</span>; ++j) {    </div><div>            </div><div><span style="color: #6a9955;">                //check edge cases, if within bounds, apply filter</span></div><div>                <span style="color: #c586c0;">if</span> (((pixNum + ((i - ((<span style="color: #569cd6;">KERNEL_SIZE</span> - <span style="color: #b5cea8;">1</span>) / <span style="color: #b5cea8;">2</span>))*cols) + j - ((<span style="color: #569cd6;">KERNEL_SIZE</span> - <span style="color: #b5cea8;">1</span>) / <span style="color: #b5cea8;">2</span>)) &gt;= <span style="color: #b5cea8;">0</span>)</div><div>                    &amp;&amp; ((pixNum + ((i - ((<span style="color: #569cd6;">KERNEL_SIZE</span> - <span style="color: #b5cea8;">1</span>) / <span style="color: #b5cea8;">2</span>))*cols) + j - ((<span style="color: #569cd6;">KERNEL_SIZE</span> - <span style="color: #b5cea8;">1</span>) / <span style="color: #b5cea8;">2</span>)) &lt;= rows*cols-<span style="color: #b5cea8;">1</span>)</div><div>                    &amp;&amp; (((pixNum % cols) + j - ((<span style="color: #569cd6;">KERNEL_SIZE</span>-<span style="color: #b5cea8;">1</span>)/<span style="color: #b5cea8;">2</span>)) &gt;= <span style="color: #b5cea8;">0</span>)</div><div>                    &amp;&amp; (((pixNum % cols) + j - ((<span style="color: #569cd6;">KERNEL_SIZE</span>-<span style="color: #b5cea8;">1</span>)/<span style="color: #b5cea8;">2</span>)) &lt;= (cols-<span style="color: #b5cea8;">1</span>))) {</div><br /><div>                    redPixelVal += <span style="color: #9cdcfe;">kernel</span>[i][j] * <span style="color: #9cdcfe;">in_pixels</span>[pixNum + ((i - ((<span style="color: #569cd6;">KERNEL_SIZE</span> - <span style="color: #b5cea8;">1</span>) / <span style="color: #b5cea8;">2</span>))*cols) + j - ((<span style="color: #569cd6;">KERNEL_SIZE</span> - <span style="color: #b5cea8;">1</span>) / <span style="color: #b5cea8;">2</span>)].<span style="color: #9cdcfe;">red</span>;</div><div>                    greenPixelVal += <span style="color: #9cdcfe;">kernel</span>[i][j] * <span style="color: #9cdcfe;">in_pixels</span>[pixNum + ((i - ((<span style="color: #569cd6;">KERNEL_SIZE</span> - <span style="color: #b5cea8;">1</span>) / <span style="color: #b5cea8;">2</span>))*cols) + j - ((<span style="color: #569cd6;">KERNEL_SIZE</span> - <span style="color: #b5cea8;">1</span>) / <span style="color: #b5cea8;">2</span>)].<span style="color: #9cdcfe;">green</span>;</div><div>                    bluePixelVal += <span style="color: #9cdcfe;">kernel</span>[i][j] * <span style="color: #9cdcfe;">in_pixels</span>[pixNum + ((i - ((<span style="color: #569cd6;">KERNEL_SIZE</span> - <span style="color: #b5cea8;">1</span>) / <span style="color: #b5cea8;">2</span>))*cols) + j - ((<span style="color: #569cd6;">KERNEL_SIZE</span> - <span style="color: #b5cea8;">1</span>) / <span style="color: #b5cea8;">2</span>)].<span style="color: #9cdcfe;">blue</span>;</div><div>                    kernelSum += <span style="color: #9cdcfe;">kernel</span>[i][j];</div><div>                }</div><div>            }</div><div>        }</div><div>        </div><div><span style="color: #6a9955;">        //update output image</span></div><div>        <span style="color: #9cdcfe;">out_pixels</span>[pixNum].<span style="color: #9cdcfe;">red</span> = redPixelVal / kernelSum;</div><div>        <span style="color: #9cdcfe;">out_pixels</span>[<span style="color: #9cdcfe;">pixNum</span>].<span style="color: #9cdcfe;">green</span> = greenPixelVal / kernelSum;</div><div>        <span style="color: #9cdcfe;">out_pixels</span>[<span style="color: #9cdcfe;">pixNum</span>].<span style="color: #9cdcfe;">blue</span> = bluePixelVal / kernelSum;</div><div>    }</div><div>}</div></div></div></div></div></div></div></foreignObject><text x="4202" y="2719" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">//*****************************************************************************************...</text></switch></g><rect x="510" y="20" width="450" height="40" rx="6" ry="6" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 448px; height: 1px; padding-top: 40px; margin-left: 511px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><font color="#ff33ff">https://github.com/qyzhizi/canny-edge-detector.git</font></div></div></div></foreignObject><text x="735" y="44" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">https://github.com/qyzhizi/canny-edge-detector.git</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.drawio.com/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>